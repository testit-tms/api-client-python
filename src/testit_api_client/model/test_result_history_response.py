"""
    API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v2.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from testit_api_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from testit_api_client.exceptions import ApiAttributeError


def lazy_import():
    from testit_api_client.model.attachment_model import AttachmentModel
    from testit_api_client.model.link_model import LinkModel
    globals()['AttachmentModel'] = AttachmentModel
    globals()['LinkModel'] = LinkModel


class TestResultHistoryResponse(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    additional_properties_type = None

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'id': (str,),  # noqa: E501
            'created_date': (datetime,),  # noqa: E501
            'modified_date': (datetime,),  # noqa: E501
            'user_id': (str,),  # noqa: E501
            'is_automated': (bool,),  # noqa: E501
            'created_by_id': (str,),  # noqa: E501
            'failure_class_ids': ([str],),  # noqa: E501
            'test_run_id': (str, none_type,),  # noqa: E501
            'test_run_name': (str, none_type,),  # noqa: E501
            'created_by_user_name': (str, none_type,),  # noqa: E501
            'test_plan_id': (str, none_type,),  # noqa: E501
            'test_plan_global_id': (int, none_type,),  # noqa: E501
            'test_plan_name': (str, none_type,),  # noqa: E501
            'configuration_name': (str, none_type,),  # noqa: E501
            'outcome': (str, none_type,),  # noqa: E501
            'comment': (str, none_type,),  # noqa: E501
            'links': ([LinkModel], none_type,),  # noqa: E501
            'started_on': (datetime, none_type,),  # noqa: E501
            'completed_on': (datetime, none_type,),  # noqa: E501
            'duration': (int, none_type,),  # noqa: E501
            'modified_by_id': (str, none_type,),  # noqa: E501
            'attachments': ([AttachmentModel], none_type,),  # noqa: E501
            'work_item_version_id': (str, none_type,),  # noqa: E501
            'work_item_version_number': (int, none_type,),  # noqa: E501
            'launch_source': (str, none_type,),  # noqa: E501
            'parameters': ({str: (str,)}, none_type,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'id': 'id',  # noqa: E501
        'created_date': 'createdDate',  # noqa: E501
        'modified_date': 'modifiedDate',  # noqa: E501
        'user_id': 'userId',  # noqa: E501
        'is_automated': 'isAutomated',  # noqa: E501
        'created_by_id': 'createdById',  # noqa: E501
        'failure_class_ids': 'failureClassIds',  # noqa: E501
        'test_run_id': 'testRunId',  # noqa: E501
        'test_run_name': 'testRunName',  # noqa: E501
        'created_by_user_name': 'createdByUserName',  # noqa: E501
        'test_plan_id': 'testPlanId',  # noqa: E501
        'test_plan_global_id': 'testPlanGlobalId',  # noqa: E501
        'test_plan_name': 'testPlanName',  # noqa: E501
        'configuration_name': 'configurationName',  # noqa: E501
        'outcome': 'outcome',  # noqa: E501
        'comment': 'comment',  # noqa: E501
        'links': 'links',  # noqa: E501
        'started_on': 'startedOn',  # noqa: E501
        'completed_on': 'completedOn',  # noqa: E501
        'duration': 'duration',  # noqa: E501
        'modified_by_id': 'modifiedById',  # noqa: E501
        'attachments': 'attachments',  # noqa: E501
        'work_item_version_id': 'workItemVersionId',  # noqa: E501
        'work_item_version_number': 'workItemVersionNumber',  # noqa: E501
        'launch_source': 'launchSource',  # noqa: E501
        'parameters': 'parameters',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, id, created_date, modified_date, user_id, is_automated, created_by_id, failure_class_ids, *args, **kwargs):  # noqa: E501
        """TestResultHistoryResponse - a model defined in OpenAPI

        Args:
            id (str): Internal test result identifier
            created_date (datetime): Test result creation date
            modified_date (datetime): Test result last modification date
            user_id (str): Internal identifier of user who stopped test run related to the test result or user who created the test result                If test run was stopped, this property equals identifier of user who stopped it.  Otherwise, the property equals identifier of user who created the test result
            is_automated (bool): Boolean flag defines if test point related to the test result is automated or not
            created_by_id (str): Unique identifier of user who created first test result in the test run
            failure_class_ids ([str]): Unique identifier of failure classes related to the first test result in the test run

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            test_run_id (str, none_type): Identifier of test run related to the test result. [optional]  # noqa: E501
            test_run_name (str, none_type): Name of test run related to the test result. [optional]  # noqa: E501
            created_by_user_name (str, none_type): Username of user who created test run. [optional]  # noqa: E501
            test_plan_id (str, none_type): Internal identifier of test plan related to the test result's test run. [optional]  # noqa: E501
            test_plan_global_id (int, none_type): Global identifier of test plan related to the test result's test run. [optional]  # noqa: E501
            test_plan_name (str, none_type): Name of test plan related to the test result's test run. [optional]  # noqa: E501
            configuration_name (str, none_type): Configuration name of test point related to the test result or from test result itself                If test point related to the test result has configuration, this property will be equal to the test point configuration name.  Otherwise, this property will be equal to the test result configuration name. [optional]  # noqa: E501
            outcome (str, none_type): Outcome from test result with max modified date or from first created test result                Property can contain one of these values: Passed, Failed, InProgress, Blocked, Skipped.                If any test result related to the test run is linked with autotest and the run has an outcome, the outcome value equals to the  worst outcome of the last modified test result. Otherwise, the outcome equals to the outcome of first created test result in the  test run.. [optional]  # noqa: E501
            comment (str, none_type): Test result comment                If any test result related to the test run is linked with autotest, comment will have default value.  Otherwise, the comment equals to the comment of first created test result in the test run. [optional]  # noqa: E501
            links ([LinkModel], none_type): Test result links                If any test result related to the test run is linked with autotest, link will be equal to the links of last modified test result.  Otherwise, the links equals to the links of first created test result in the test run.. [optional]  # noqa: E501
            started_on (datetime, none_type): Start date time from test result or from test run (if test run new state is Running or Completed state). [optional]  # noqa: E501
            completed_on (datetime, none_type): End date time from test result or from test run (if test run new state is In progress, Stopped or Completed). [optional]  # noqa: E501
            duration (int, none_type): Duration of first created test result in the test run. [optional]  # noqa: E501
            modified_by_id (str, none_type): Unique identifier of user who applied last modification of first test result in the test run. [optional]  # noqa: E501
            attachments ([AttachmentModel], none_type): Attachments related to the test result                If any test result related to the test run is linked with autotest, attachments will be equal to the attachments of last modified  test result. Otherwise, the attachments equals to the attachments of first created test result in the test run.. [optional]  # noqa: E501
            work_item_version_id (str, none_type): Unique identifier of workitem version related to the first test result in the test run. [optional]  # noqa: E501
            work_item_version_number (int, none_type): Number of workitem version related to the first test result in the test run. [optional]  # noqa: E501
            launch_source (str, none_type): [optional]  # noqa: E501
            parameters ({str: (str,)}, none_type): Parameters of test result. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.id = id
        self.created_date = created_date
        self.modified_date = modified_date
        self.user_id = user_id
        self.is_automated = is_automated
        self.created_by_id = created_by_id
        self.failure_class_ids = failure_class_ids
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, id, created_date, modified_date, user_id, is_automated, created_by_id, failure_class_ids, *args, **kwargs):  # noqa: E501
        """TestResultHistoryResponse - a model defined in OpenAPI

        Args:
            id (str): Internal test result identifier
            created_date (datetime): Test result creation date
            modified_date (datetime): Test result last modification date
            user_id (str): Internal identifier of user who stopped test run related to the test result or user who created the test result                If test run was stopped, this property equals identifier of user who stopped it.  Otherwise, the property equals identifier of user who created the test result
            is_automated (bool): Boolean flag defines if test point related to the test result is automated or not
            created_by_id (str): Unique identifier of user who created first test result in the test run
            failure_class_ids ([str]): Unique identifier of failure classes related to the first test result in the test run

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            test_run_id (str, none_type): Identifier of test run related to the test result. [optional]  # noqa: E501
            test_run_name (str, none_type): Name of test run related to the test result. [optional]  # noqa: E501
            created_by_user_name (str, none_type): Username of user who created test run. [optional]  # noqa: E501
            test_plan_id (str, none_type): Internal identifier of test plan related to the test result's test run. [optional]  # noqa: E501
            test_plan_global_id (int, none_type): Global identifier of test plan related to the test result's test run. [optional]  # noqa: E501
            test_plan_name (str, none_type): Name of test plan related to the test result's test run. [optional]  # noqa: E501
            configuration_name (str, none_type): Configuration name of test point related to the test result or from test result itself                If test point related to the test result has configuration, this property will be equal to the test point configuration name.  Otherwise, this property will be equal to the test result configuration name. [optional]  # noqa: E501
            outcome (str, none_type): Outcome from test result with max modified date or from first created test result                Property can contain one of these values: Passed, Failed, InProgress, Blocked, Skipped.                If any test result related to the test run is linked with autotest and the run has an outcome, the outcome value equals to the  worst outcome of the last modified test result. Otherwise, the outcome equals to the outcome of first created test result in the  test run.. [optional]  # noqa: E501
            comment (str, none_type): Test result comment                If any test result related to the test run is linked with autotest, comment will have default value.  Otherwise, the comment equals to the comment of first created test result in the test run. [optional]  # noqa: E501
            links ([LinkModel], none_type): Test result links                If any test result related to the test run is linked with autotest, link will be equal to the links of last modified test result.  Otherwise, the links equals to the links of first created test result in the test run.. [optional]  # noqa: E501
            started_on (datetime, none_type): Start date time from test result or from test run (if test run new state is Running or Completed state). [optional]  # noqa: E501
            completed_on (datetime, none_type): End date time from test result or from test run (if test run new state is In progress, Stopped or Completed). [optional]  # noqa: E501
            duration (int, none_type): Duration of first created test result in the test run. [optional]  # noqa: E501
            modified_by_id (str, none_type): Unique identifier of user who applied last modification of first test result in the test run. [optional]  # noqa: E501
            attachments ([AttachmentModel], none_type): Attachments related to the test result                If any test result related to the test run is linked with autotest, attachments will be equal to the attachments of last modified  test result. Otherwise, the attachments equals to the attachments of first created test result in the test run.. [optional]  # noqa: E501
            work_item_version_id (str, none_type): Unique identifier of workitem version related to the first test result in the test run. [optional]  # noqa: E501
            work_item_version_number (int, none_type): Number of workitem version related to the first test result in the test run. [optional]  # noqa: E501
            launch_source (str, none_type): [optional]  # noqa: E501
            parameters ({str: (str,)}, none_type): Parameters of test result. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.id = id
        self.created_date = created_date
        self.modified_date = modified_date
        self.user_id = user_id
        self.is_automated = is_automated
        self.created_by_id = created_by_id
        self.failure_class_ids = failure_class_ids
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
