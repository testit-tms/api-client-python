# coding: utf-8

"""
    API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class WebhookResponse(BaseModel):
    """
    WebhookResponse
    """
    uri: Optional[StrictStr] = None
    status_code: StrictInt = Field(default=..., alias="statusCode")
    request_body: Optional[StrictStr] = Field(default=None, alias="requestBody")
    request_meta: StrictStr = Field(default=..., alias="requestMeta")
    response_body: StrictStr = Field(default=..., alias="responseBody")
    response_meta: StrictStr = Field(default=..., alias="responseMeta")
    __properties = ["uri", "statusCode", "requestBody", "requestMeta", "responseBody", "responseMeta"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WebhookResponse:
        """Create an instance of WebhookResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if uri (nullable) is None
        # and __fields_set__ contains the field
        if self.uri is None and "uri" in self.__fields_set__:
            _dict['uri'] = None

        # set to None if request_body (nullable) is None
        # and __fields_set__ contains the field
        if self.request_body is None and "request_body" in self.__fields_set__:
            _dict['requestBody'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WebhookResponse:
        """Create an instance of WebhookResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WebhookResponse.parse_obj(obj)

        _obj = WebhookResponse.parse_obj({
            "uri": obj.get("uri"),
            "status_code": obj.get("statusCode"),
            "request_body": obj.get("requestBody"),
            "request_meta": obj.get("requestMeta"),
            "response_body": obj.get("responseBody"),
            "response_meta": obj.get("responseMeta")
        })
        return _obj


