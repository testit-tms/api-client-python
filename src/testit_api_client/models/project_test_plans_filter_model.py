# coding: utf-8

"""
    API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from testit_api_client.models.date_time_range_selector_model import DateTimeRangeSelectorModel
from testit_api_client.models.test_plan_status_model import TestPlanStatusModel
from typing import Optional, Set
from typing_extensions import Self

class ProjectTestPlansFilterModel(BaseModel):
    """
    ProjectTestPlansFilterModel
    """ # noqa: E501
    name: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = None
    description: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = None
    build: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = None
    product_name: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, alias="productName")
    status: Optional[List[TestPlanStatusModel]] = None
    global_ids: Optional[List[StrictInt]] = Field(default=None, alias="globalIds")
    is_locked: Optional[StrictBool] = Field(default=None, alias="isLocked")
    locked_date: Optional[DateTimeRangeSelectorModel] = Field(default=None, alias="lockedDate")
    automatic_duration_timer: Optional[List[StrictBool]] = Field(default=None, alias="automaticDurationTimer")
    created_by_ids: Optional[List[StrictStr]] = Field(default=None, alias="createdByIds")
    created_date: Optional[DateTimeRangeSelectorModel] = Field(default=None, alias="createdDate")
    start_date: Optional[DateTimeRangeSelectorModel] = Field(default=None, alias="startDate")
    end_date: Optional[DateTimeRangeSelectorModel] = Field(default=None, alias="endDate")
    tag_names: Optional[List[StrictStr]] = Field(default=None, alias="tagNames")
    attributes: Optional[Dict[str, Optional[List[StrictStr]]]] = None
    is_deleted: Optional[StrictBool] = Field(default=None, alias="isDeleted")
    __properties: ClassVar[List[str]] = ["name", "description", "build", "productName", "status", "globalIds", "isLocked", "lockedDate", "automaticDurationTimer", "createdByIds", "createdDate", "startDate", "endDate", "tagNames", "attributes", "isDeleted"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProjectTestPlansFilterModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of locked_date
        if self.locked_date:
            _dict['lockedDate'] = self.locked_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_date
        if self.created_date:
            _dict['createdDate'] = self.created_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of start_date
        if self.start_date:
            _dict['startDate'] = self.start_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of end_date
        if self.end_date:
            _dict['endDate'] = self.end_date.to_dict()
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if build (nullable) is None
        # and model_fields_set contains the field
        if self.build is None and "build" in self.model_fields_set:
            _dict['build'] = None

        # set to None if product_name (nullable) is None
        # and model_fields_set contains the field
        if self.product_name is None and "product_name" in self.model_fields_set:
            _dict['productName'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if global_ids (nullable) is None
        # and model_fields_set contains the field
        if self.global_ids is None and "global_ids" in self.model_fields_set:
            _dict['globalIds'] = None

        # set to None if is_locked (nullable) is None
        # and model_fields_set contains the field
        if self.is_locked is None and "is_locked" in self.model_fields_set:
            _dict['isLocked'] = None

        # set to None if locked_date (nullable) is None
        # and model_fields_set contains the field
        if self.locked_date is None and "locked_date" in self.model_fields_set:
            _dict['lockedDate'] = None

        # set to None if automatic_duration_timer (nullable) is None
        # and model_fields_set contains the field
        if self.automatic_duration_timer is None and "automatic_duration_timer" in self.model_fields_set:
            _dict['automaticDurationTimer'] = None

        # set to None if created_by_ids (nullable) is None
        # and model_fields_set contains the field
        if self.created_by_ids is None and "created_by_ids" in self.model_fields_set:
            _dict['createdByIds'] = None

        # set to None if created_date (nullable) is None
        # and model_fields_set contains the field
        if self.created_date is None and "created_date" in self.model_fields_set:
            _dict['createdDate'] = None

        # set to None if start_date (nullable) is None
        # and model_fields_set contains the field
        if self.start_date is None and "start_date" in self.model_fields_set:
            _dict['startDate'] = None

        # set to None if end_date (nullable) is None
        # and model_fields_set contains the field
        if self.end_date is None and "end_date" in self.model_fields_set:
            _dict['endDate'] = None

        # set to None if tag_names (nullable) is None
        # and model_fields_set contains the field
        if self.tag_names is None and "tag_names" in self.model_fields_set:
            _dict['tagNames'] = None

        # set to None if attributes (nullable) is None
        # and model_fields_set contains the field
        if self.attributes is None and "attributes" in self.model_fields_set:
            _dict['attributes'] = None

        # set to None if is_deleted (nullable) is None
        # and model_fields_set contains the field
        if self.is_deleted is None and "is_deleted" in self.model_fields_set:
            _dict['isDeleted'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProjectTestPlansFilterModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "build": obj.get("build"),
            "productName": obj.get("productName"),
            "status": obj.get("status"),
            "globalIds": obj.get("globalIds"),
            "isLocked": obj.get("isLocked"),
            "lockedDate": DateTimeRangeSelectorModel.from_dict(obj["lockedDate"]) if obj.get("lockedDate") is not None else None,
            "automaticDurationTimer": obj.get("automaticDurationTimer"),
            "createdByIds": obj.get("createdByIds"),
            "createdDate": DateTimeRangeSelectorModel.from_dict(obj["createdDate"]) if obj.get("createdDate") is not None else None,
            "startDate": DateTimeRangeSelectorModel.from_dict(obj["startDate"]) if obj.get("startDate") is not None else None,
            "endDate": DateTimeRangeSelectorModel.from_dict(obj["endDate"]) if obj.get("endDate") is not None else None,
            "tagNames": obj.get("tagNames"),
            "attributes": obj.get("attributes"),
            "isDeleted": obj.get("isDeleted")
        })
        return _obj


