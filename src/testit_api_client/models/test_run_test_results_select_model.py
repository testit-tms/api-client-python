# coding: utf-8

"""
    API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from testit_api_client.models.guid_extraction_model import GuidExtractionModel
from testit_api_client.models.test_results_local_filter_model import TestResultsLocalFilterModel

class TestRunTestResultsSelectModel(BaseModel):
    """
    TestRunTestResultsSelectModel
    """
    filter: Optional[TestResultsLocalFilterModel] = Field(default=None, description="Collection of filters to apply to search")
    test_result_ids_extraction_model: Optional[GuidExtractionModel] = Field(default=None, alias="testResultIdsExtractionModel", description="Rules to include and exclude certain entities in result")
    __properties = ["filter", "testResultIdsExtractionModel"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TestRunTestResultsSelectModel:
        """Create an instance of TestRunTestResultsSelectModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of filter
        if self.filter:
            _dict['filter'] = self.filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of test_result_ids_extraction_model
        if self.test_result_ids_extraction_model:
            _dict['testResultIdsExtractionModel'] = self.test_result_ids_extraction_model.to_dict()
        # set to None if filter (nullable) is None
        # and __fields_set__ contains the field
        if self.filter is None and "filter" in self.__fields_set__:
            _dict['filter'] = None

        # set to None if test_result_ids_extraction_model (nullable) is None
        # and __fields_set__ contains the field
        if self.test_result_ids_extraction_model is None and "test_result_ids_extraction_model" in self.__fields_set__:
            _dict['testResultIdsExtractionModel'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TestRunTestResultsSelectModel:
        """Create an instance of TestRunTestResultsSelectModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TestRunTestResultsSelectModel.parse_obj(obj)

        _obj = TestRunTestResultsSelectModel.parse_obj({
            "filter": TestResultsLocalFilterModel.from_dict(obj.get("filter")) if obj.get("filter") is not None else None,
            "test_result_ids_extraction_model": GuidExtractionModel.from_dict(obj.get("testResultIdsExtractionModel")) if obj.get("testResultIdsExtractionModel") is not None else None
        })
        return _obj


