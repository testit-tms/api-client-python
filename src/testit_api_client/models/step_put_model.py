# coding: utf-8

"""
    API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class StepPutModel(BaseModel):
    """
    StepPutModel
    """
    id: StrictStr = Field(...)
    action: Optional[StrictStr] = None
    expected: Optional[StrictStr] = None
    test_data: Optional[StrictStr] = Field(default=None, alias="testData")
    comments: Optional[StrictStr] = None
    work_item_id: Optional[StrictStr] = Field(default=None, alias="workItemId")
    __properties = ["id", "action", "expected", "testData", "comments", "workItemId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StepPutModel:
        """Create an instance of StepPutModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if action (nullable) is None
        # and __fields_set__ contains the field
        if self.action is None and "action" in self.__fields_set__:
            _dict['action'] = None

        # set to None if expected (nullable) is None
        # and __fields_set__ contains the field
        if self.expected is None and "expected" in self.__fields_set__:
            _dict['expected'] = None

        # set to None if test_data (nullable) is None
        # and __fields_set__ contains the field
        if self.test_data is None and "test_data" in self.__fields_set__:
            _dict['testData'] = None

        # set to None if comments (nullable) is None
        # and __fields_set__ contains the field
        if self.comments is None and "comments" in self.__fields_set__:
            _dict['comments'] = None

        # set to None if work_item_id (nullable) is None
        # and __fields_set__ contains the field
        if self.work_item_id is None and "work_item_id" in self.__fields_set__:
            _dict['workItemId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StepPutModel:
        """Create an instance of StepPutModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StepPutModel.parse_obj(obj)

        _obj = StepPutModel.parse_obj({
            "id": obj.get("id"),
            "action": obj.get("action"),
            "expected": obj.get("expected"),
            "test_data": obj.get("testData"),
            "comments": obj.get("comments"),
            "work_item_id": obj.get("workItemId")
        })
        return _obj


