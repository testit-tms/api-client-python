# coding: utf-8

"""
    API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from testit_api_client.models.audit_api_result import AuditApiResult
from testit_api_client.models.configuration_short_api_result import ConfigurationShortApiResult
from testit_api_client.models.last_test_result_api_result import LastTestResultApiResult
from testit_api_client.models.parameter_short_api_result import ParameterShortApiResult
from testit_api_client.models.test_plan_test_points_test_suite_search_api_result import TestPlanTestPointsTestSuiteSearchApiResult
from testit_api_client.models.test_plan_test_points_work_item_search_api_result import TestPlanTestPointsWorkItemSearchApiResult
from testit_api_client.models.test_status_short_api_result import TestStatusShortApiResult
from testit_api_client.models.user_name_api_result import UserNameApiResult

class TestPlanTestPointsSearchApiResult(BaseModel):
    """
    TestPlanTestPointsSearchApiResult
    """
    id: StrictStr = Field(...)
    created: AuditApiResult = Field(...)
    modified: Optional[AuditApiResult] = None
    status: StrictStr = Field(...)
    status_model: TestStatusShortApiResult = Field(default=..., alias="statusModel")
    in_progress: StrictBool = Field(default=..., alias="inProgress")
    configuration: ConfigurationShortApiResult = Field(...)
    tester: Optional[UserNameApiResult] = None
    test_suite: TestPlanTestPointsTestSuiteSearchApiResult = Field(default=..., alias="testSuite")
    work_item: TestPlanTestPointsWorkItemSearchApiResult = Field(default=..., alias="workItem")
    parameters: conlist(ParameterShortApiResult) = Field(...)
    last_test_result: Optional[LastTestResultApiResult] = Field(default=None, alias="lastTestResult")
    __properties = ["id", "created", "modified", "status", "statusModel", "inProgress", "configuration", "tester", "testSuite", "workItem", "parameters", "lastTestResult"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TestPlanTestPointsSearchApiResult:
        """Create an instance of TestPlanTestPointsSearchApiResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of created
        if self.created:
            _dict['created'] = self.created.to_dict()
        # override the default output from pydantic by calling `to_dict()` of modified
        if self.modified:
            _dict['modified'] = self.modified.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status_model
        if self.status_model:
            _dict['statusModel'] = self.status_model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of configuration
        if self.configuration:
            _dict['configuration'] = self.configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tester
        if self.tester:
            _dict['tester'] = self.tester.to_dict()
        # override the default output from pydantic by calling `to_dict()` of test_suite
        if self.test_suite:
            _dict['testSuite'] = self.test_suite.to_dict()
        # override the default output from pydantic by calling `to_dict()` of work_item
        if self.work_item:
            _dict['workItem'] = self.work_item.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item in self.parameters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['parameters'] = _items
        # override the default output from pydantic by calling `to_dict()` of last_test_result
        if self.last_test_result:
            _dict['lastTestResult'] = self.last_test_result.to_dict()
        # set to None if modified (nullable) is None
        # and __fields_set__ contains the field
        if self.modified is None and "modified" in self.__fields_set__:
            _dict['modified'] = None

        # set to None if tester (nullable) is None
        # and __fields_set__ contains the field
        if self.tester is None and "tester" in self.__fields_set__:
            _dict['tester'] = None

        # set to None if last_test_result (nullable) is None
        # and __fields_set__ contains the field
        if self.last_test_result is None and "last_test_result" in self.__fields_set__:
            _dict['lastTestResult'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TestPlanTestPointsSearchApiResult:
        """Create an instance of TestPlanTestPointsSearchApiResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TestPlanTestPointsSearchApiResult.parse_obj(obj)

        _obj = TestPlanTestPointsSearchApiResult.parse_obj({
            "id": obj.get("id"),
            "created": AuditApiResult.from_dict(obj.get("created")) if obj.get("created") is not None else None,
            "modified": AuditApiResult.from_dict(obj.get("modified")) if obj.get("modified") is not None else None,
            "status": obj.get("status"),
            "status_model": TestStatusShortApiResult.from_dict(obj.get("statusModel")) if obj.get("statusModel") is not None else None,
            "in_progress": obj.get("inProgress"),
            "configuration": ConfigurationShortApiResult.from_dict(obj.get("configuration")) if obj.get("configuration") is not None else None,
            "tester": UserNameApiResult.from_dict(obj.get("tester")) if obj.get("tester") is not None else None,
            "test_suite": TestPlanTestPointsTestSuiteSearchApiResult.from_dict(obj.get("testSuite")) if obj.get("testSuite") is not None else None,
            "work_item": TestPlanTestPointsWorkItemSearchApiResult.from_dict(obj.get("workItem")) if obj.get("workItem") is not None else None,
            "parameters": [ParameterShortApiResult.from_dict(_item) for _item in obj.get("parameters")] if obj.get("parameters") is not None else None,
            "last_test_result": LastTestResultApiResult.from_dict(obj.get("lastTestResult")) if obj.get("lastTestResult") is not None else None
        })
        return _obj


