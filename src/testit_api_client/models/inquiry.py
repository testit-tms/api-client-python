# coding: utf-8

"""
    API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from testit_api_client.models.composite_filter import CompositeFilter
from testit_api_client.models.order import Order
from testit_api_client.models.page import Page

class Inquiry(BaseModel):
    """
    Inquiry
    """
    filter: Optional[CompositeFilter] = None
    order: conlist(Order) = Field(...)
    page: Optional[Page] = None
    __properties = ["filter", "order", "page"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Inquiry:
        """Create an instance of Inquiry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of filter
        if self.filter:
            _dict['filter'] = self.filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in order (list)
        _items = []
        if self.order:
            for _item in self.order:
                if _item:
                    _items.append(_item.to_dict())
            _dict['order'] = _items
        # override the default output from pydantic by calling `to_dict()` of page
        if self.page:
            _dict['page'] = self.page.to_dict()
        # set to None if filter (nullable) is None
        # and __fields_set__ contains the field
        if self.filter is None and "filter" in self.__fields_set__:
            _dict['filter'] = None

        # set to None if page (nullable) is None
        # and __fields_set__ contains the field
        if self.page is None and "page" in self.__fields_set__:
            _dict['page'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Inquiry:
        """Create an instance of Inquiry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Inquiry.parse_obj(obj)

        _obj = Inquiry.parse_obj({
            "filter": CompositeFilter.from_dict(obj.get("filter")) if obj.get("filter") is not None else None,
            "order": [Order.from_dict(_item) for _item in obj.get("order")] if obj.get("order") is not None else None,
            "page": Page.from_dict(obj.get("page")) if obj.get("page") is not None else None
        })
        return _obj


