# coding: utf-8

"""
    API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from testit_api_client.models.audit_api_result import AuditApiResult
from testit_api_client.models.test_plan_test_points_section_search_api_result import TestPlanTestPointsSectionSearchApiResult
from testit_api_client.models.work_item_priority import WorkItemPriority
from testit_api_client.models.work_item_state import WorkItemState

class TestPlanTestPointsWorkItemSearchApiResult(BaseModel):
    """
    TestPlanTestPointsWorkItemSearchApiResult
    """
    id: StrictStr = Field(...)
    global_id: StrictInt = Field(default=..., alias="globalId")
    version_id: StrictStr = Field(default=..., alias="versionId")
    version_number: StrictInt = Field(default=..., alias="versionNumber")
    median_duration: Optional[StrictInt] = Field(default=None, alias="medianDuration")
    is_deleted: Optional[StrictBool] = Field(default=None, alias="isDeleted")
    duration: StrictInt = Field(...)
    state: WorkItemState = Field(...)
    tags: conlist(StrictStr) = Field(...)
    attributes: Dict[str, Any] = Field(...)
    order_rank: Optional[StrictStr] = Field(default=None, alias="orderRank")
    is_automated: StrictBool = Field(default=..., alias="isAutomated")
    name: StrictStr = Field(...)
    priority: WorkItemPriority = Field(...)
    section: TestPlanTestPointsSectionSearchApiResult = Field(...)
    created: AuditApiResult = Field(...)
    modified: Optional[AuditApiResult] = None
    __properties = ["id", "globalId", "versionId", "versionNumber", "medianDuration", "isDeleted", "duration", "state", "tags", "attributes", "orderRank", "isAutomated", "name", "priority", "section", "created", "modified"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TestPlanTestPointsWorkItemSearchApiResult:
        """Create an instance of TestPlanTestPointsWorkItemSearchApiResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of section
        if self.section:
            _dict['section'] = self.section.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created
        if self.created:
            _dict['created'] = self.created.to_dict()
        # override the default output from pydantic by calling `to_dict()` of modified
        if self.modified:
            _dict['modified'] = self.modified.to_dict()
        # set to None if median_duration (nullable) is None
        # and __fields_set__ contains the field
        if self.median_duration is None and "median_duration" in self.__fields_set__:
            _dict['medianDuration'] = None

        # set to None if is_deleted (nullable) is None
        # and __fields_set__ contains the field
        if self.is_deleted is None and "is_deleted" in self.__fields_set__:
            _dict['isDeleted'] = None

        # set to None if order_rank (nullable) is None
        # and __fields_set__ contains the field
        if self.order_rank is None and "order_rank" in self.__fields_set__:
            _dict['orderRank'] = None

        # set to None if modified (nullable) is None
        # and __fields_set__ contains the field
        if self.modified is None and "modified" in self.__fields_set__:
            _dict['modified'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TestPlanTestPointsWorkItemSearchApiResult:
        """Create an instance of TestPlanTestPointsWorkItemSearchApiResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TestPlanTestPointsWorkItemSearchApiResult.parse_obj(obj)

        _obj = TestPlanTestPointsWorkItemSearchApiResult.parse_obj({
            "id": obj.get("id"),
            "global_id": obj.get("globalId"),
            "version_id": obj.get("versionId"),
            "version_number": obj.get("versionNumber"),
            "median_duration": obj.get("medianDuration"),
            "is_deleted": obj.get("isDeleted"),
            "duration": obj.get("duration"),
            "state": obj.get("state"),
            "tags": obj.get("tags"),
            "attributes": obj.get("attributes"),
            "order_rank": obj.get("orderRank"),
            "is_automated": obj.get("isAutomated"),
            "name": obj.get("name"),
            "priority": obj.get("priority"),
            "section": TestPlanTestPointsSectionSearchApiResult.from_dict(obj.get("section")) if obj.get("section") is not None else None,
            "created": AuditApiResult.from_dict(obj.get("created")) if obj.get("created") is not None else None,
            "modified": AuditApiResult.from_dict(obj.get("modified")) if obj.get("modified") is not None else None
        })
        return _obj


