# coding: utf-8

"""
    API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from testit_api_client.models.audit_api_result import AuditApiResult
from testit_api_client.models.test_plan_test_points_section_search_api_result import TestPlanTestPointsSectionSearchApiResult
from testit_api_client.models.work_item_priority import WorkItemPriority
from testit_api_client.models.work_item_state import WorkItemState
from typing import Optional, Set
from typing_extensions import Self

class TestPlanTestPointsWorkItemSearchApiResult(BaseModel):
    """
    TestPlanTestPointsWorkItemSearchApiResult
    """ # noqa: E501
    id: StrictStr
    global_id: StrictInt = Field(alias="globalId")
    version_id: StrictStr = Field(alias="versionId")
    version_number: StrictInt = Field(alias="versionNumber")
    median_duration: Optional[StrictInt] = Field(default=None, alias="medianDuration")
    is_deleted: Optional[StrictBool] = Field(default=None, alias="isDeleted")
    duration: StrictInt
    state: WorkItemState
    tags: List[StrictStr]
    attributes: Dict[str, Any]
    order_rank: Optional[StrictStr] = Field(default=None, alias="orderRank")
    is_automated: StrictBool = Field(alias="isAutomated")
    name: StrictStr
    priority: WorkItemPriority
    section: TestPlanTestPointsSectionSearchApiResult
    created: AuditApiResult
    modified: Optional[AuditApiResult] = None
    __properties: ClassVar[List[str]] = ["id", "globalId", "versionId", "versionNumber", "medianDuration", "isDeleted", "duration", "state", "tags", "attributes", "orderRank", "isAutomated", "name", "priority", "section", "created", "modified"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TestPlanTestPointsWorkItemSearchApiResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of section
        if self.section:
            _dict['section'] = self.section.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created
        if self.created:
            _dict['created'] = self.created.to_dict()
        # override the default output from pydantic by calling `to_dict()` of modified
        if self.modified:
            _dict['modified'] = self.modified.to_dict()
        # set to None if median_duration (nullable) is None
        # and model_fields_set contains the field
        if self.median_duration is None and "median_duration" in self.model_fields_set:
            _dict['medianDuration'] = None

        # set to None if is_deleted (nullable) is None
        # and model_fields_set contains the field
        if self.is_deleted is None and "is_deleted" in self.model_fields_set:
            _dict['isDeleted'] = None

        # set to None if order_rank (nullable) is None
        # and model_fields_set contains the field
        if self.order_rank is None and "order_rank" in self.model_fields_set:
            _dict['orderRank'] = None

        # set to None if modified (nullable) is None
        # and model_fields_set contains the field
        if self.modified is None and "modified" in self.model_fields_set:
            _dict['modified'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TestPlanTestPointsWorkItemSearchApiResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "globalId": obj.get("globalId"),
            "versionId": obj.get("versionId"),
            "versionNumber": obj.get("versionNumber"),
            "medianDuration": obj.get("medianDuration"),
            "isDeleted": obj.get("isDeleted"),
            "duration": obj.get("duration"),
            "state": obj.get("state"),
            "tags": obj.get("tags"),
            "attributes": obj.get("attributes"),
            "orderRank": obj.get("orderRank"),
            "isAutomated": obj.get("isAutomated"),
            "name": obj.get("name"),
            "priority": obj.get("priority"),
            "section": TestPlanTestPointsSectionSearchApiResult.from_dict(obj["section"]) if obj.get("section") is not None else None,
            "created": AuditApiResult.from_dict(obj["created"]) if obj.get("created") is not None else None,
            "modified": AuditApiResult.from_dict(obj["modified"]) if obj.get("modified") is not None else None
        })
        return _obj


