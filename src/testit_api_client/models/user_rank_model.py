# coding: utf-8

"""
    API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictBool, StrictInt

class UserRankModel(BaseModel):
    """
    UserRankModel
    """
    score: StrictInt = Field(...)
    work_items_created: StrictInt = Field(default=..., alias="workItemsCreated")
    passed_test_points: StrictInt = Field(default=..., alias="passedTestPoints")
    failed_test_points: StrictInt = Field(default=..., alias="failedTestPoints")
    skipped_test_points: StrictInt = Field(default=..., alias="skippedTestPoints")
    blocked_test_points: StrictInt = Field(default=..., alias="blockedTestPoints")
    level_avatar_enabled: StrictBool = Field(default=..., alias="levelAvatarEnabled")
    __properties = ["score", "workItemsCreated", "passedTestPoints", "failedTestPoints", "skippedTestPoints", "blockedTestPoints", "levelAvatarEnabled"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserRankModel:
        """Create an instance of UserRankModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserRankModel:
        """Create an instance of UserRankModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserRankModel.parse_obj(obj)

        _obj = UserRankModel.parse_obj({
            "score": obj.get("score"),
            "work_items_created": obj.get("workItemsCreated"),
            "passed_test_points": obj.get("passedTestPoints"),
            "failed_test_points": obj.get("failedTestPoints"),
            "skipped_test_points": obj.get("skippedTestPoints"),
            "blocked_test_points": obj.get("blockedTestPoints"),
            "level_avatar_enabled": obj.get("levelAvatarEnabled")
        })
        return _obj


