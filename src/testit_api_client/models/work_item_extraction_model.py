# coding: utf-8

"""
    API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from testit_api_client.models.guid_extraction_model import GuidExtractionModel

class WorkItemExtractionModel(BaseModel):
    """
    Rules for different level entities inclusion/exclusion  # noqa: E501
    """
    project_ids: Optional[GuidExtractionModel] = Field(default=None, alias="projectIds", description="Extraction parameters for projects")
    ids: Optional[GuidExtractionModel] = Field(default=None, description="Extraction parameters for work items")
    section_ids: Optional[GuidExtractionModel] = Field(default=None, alias="sectionIds", description="Extraction parameters for sections")
    __properties = ["projectIds", "ids", "sectionIds"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WorkItemExtractionModel:
        """Create an instance of WorkItemExtractionModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of project_ids
        if self.project_ids:
            _dict['projectIds'] = self.project_ids.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ids
        if self.ids:
            _dict['ids'] = self.ids.to_dict()
        # override the default output from pydantic by calling `to_dict()` of section_ids
        if self.section_ids:
            _dict['sectionIds'] = self.section_ids.to_dict()
        # set to None if project_ids (nullable) is None
        # and __fields_set__ contains the field
        if self.project_ids is None and "project_ids" in self.__fields_set__:
            _dict['projectIds'] = None

        # set to None if ids (nullable) is None
        # and __fields_set__ contains the field
        if self.ids is None and "ids" in self.__fields_set__:
            _dict['ids'] = None

        # set to None if section_ids (nullable) is None
        # and __fields_set__ contains the field
        if self.section_ids is None and "section_ids" in self.__fields_set__:
            _dict['sectionIds'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WorkItemExtractionModel:
        """Create an instance of WorkItemExtractionModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WorkItemExtractionModel.parse_obj(obj)

        _obj = WorkItemExtractionModel.parse_obj({
            "project_ids": GuidExtractionModel.from_dict(obj.get("projectIds")) if obj.get("projectIds") is not None else None,
            "ids": GuidExtractionModel.from_dict(obj.get("ids")) if obj.get("ids") is not None else None,
            "section_ids": GuidExtractionModel.from_dict(obj.get("sectionIds")) if obj.get("sectionIds") is not None else None
        })
        return _obj


