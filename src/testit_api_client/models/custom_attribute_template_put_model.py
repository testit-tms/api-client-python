# coding: utf-8

"""
    API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, constr

class CustomAttributeTemplatePutModel(BaseModel):
    """
    CustomAttributeTemplatePutModel
    """
    id: StrictStr = Field(default=..., description="Unique ID of the attribute template")
    custom_attribute_ids: Optional[conlist(StrictStr, unique_items=True)] = Field(default=None, alias="customAttributeIds", description="Collection of attribute IDs")
    name: constr(strict=True, max_length=255, min_length=0) = Field(default=..., description="Custom attributes template name")
    __properties = ["id", "customAttributeIds", "name"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CustomAttributeTemplatePutModel:
        """Create an instance of CustomAttributeTemplatePutModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if custom_attribute_ids (nullable) is None
        # and __fields_set__ contains the field
        if self.custom_attribute_ids is None and "custom_attribute_ids" in self.__fields_set__:
            _dict['customAttributeIds'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CustomAttributeTemplatePutModel:
        """Create an instance of CustomAttributeTemplatePutModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CustomAttributeTemplatePutModel.parse_obj(obj)

        _obj = CustomAttributeTemplatePutModel.parse_obj({
            "id": obj.get("id"),
            "custom_attribute_ids": obj.get("customAttributeIds"),
            "name": obj.get("name")
        })
        return _obj


