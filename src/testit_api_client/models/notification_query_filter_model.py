# coding: utf-8

"""
    API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, conlist
from testit_api_client.models.date_time_range_selector_model import DateTimeRangeSelectorModel
from testit_api_client.models.notification_type_model import NotificationTypeModel

class NotificationQueryFilterModel(BaseModel):
    """
    NotificationQueryFilterModel
    """
    types: Optional[conlist(NotificationTypeModel, unique_items=True)] = None
    is_read: Optional[StrictBool] = Field(default=None, alias="isRead")
    created_date: Optional[DateTimeRangeSelectorModel] = Field(default=None, alias="createdDate")
    __properties = ["types", "isRead", "createdDate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NotificationQueryFilterModel:
        """Create an instance of NotificationQueryFilterModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of created_date
        if self.created_date:
            _dict['createdDate'] = self.created_date.to_dict()
        # set to None if types (nullable) is None
        # and __fields_set__ contains the field
        if self.types is None and "types" in self.__fields_set__:
            _dict['types'] = None

        # set to None if is_read (nullable) is None
        # and __fields_set__ contains the field
        if self.is_read is None and "is_read" in self.__fields_set__:
            _dict['isRead'] = None

        # set to None if created_date (nullable) is None
        # and __fields_set__ contains the field
        if self.created_date is None and "created_date" in self.__fields_set__:
            _dict['createdDate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NotificationQueryFilterModel:
        """Create an instance of NotificationQueryFilterModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return NotificationQueryFilterModel.parse_obj(obj)

        _obj = NotificationQueryFilterModel.parse_obj({
            "types": obj.get("types"),
            "is_read": obj.get("isRead"),
            "created_date": DateTimeRangeSelectorModel.from_dict(obj.get("createdDate")) if obj.get("createdDate") is not None else None
        })
        return _obj


