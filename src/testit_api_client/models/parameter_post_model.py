# coding: utf-8

"""
    API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, constr

class ParameterPostModel(BaseModel):
    """
    ParameterPostModel
    """
    value: constr(strict=True, max_length=1500, min_length=0) = Field(default=..., description="Value of the parameter")
    name: constr(strict=True, max_length=255, min_length=0) = Field(default=..., description="Key of the parameter")
    __properties = ["value", "name"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ParameterPostModel:
        """Create an instance of ParameterPostModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ParameterPostModel:
        """Create an instance of ParameterPostModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ParameterPostModel.parse_obj(obj)

        _obj = ParameterPostModel.parse_obj({
            "value": obj.get("value"),
            "name": obj.get("name")
        })
        return _obj


