# coding: utf-8

"""
    API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictInt, StrictStr
from testit_api_client.models.test_status_api_result import TestStatusApiResult

class RerunTestResultApiResult(BaseModel):
    """
    RerunTestResultApiResult
    """
    id: StrictStr = Field(...)
    outcome: StrictStr = Field(...)
    status: TestStatusApiResult = Field(...)
    run_number: StrictInt = Field(default=..., alias="runNumber")
    __properties = ["id", "outcome", "status", "runNumber"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RerunTestResultApiResult:
        """Create an instance of RerunTestResultApiResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RerunTestResultApiResult:
        """Create an instance of RerunTestResultApiResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RerunTestResultApiResult.parse_obj(obj)

        _obj = RerunTestResultApiResult.parse_obj({
            "id": obj.get("id"),
            "outcome": obj.get("outcome"),
            "status": TestStatusApiResult.from_dict(obj.get("status")) if obj.get("status") is not None else None,
            "run_number": obj.get("runNumber")
        })
        return _obj


