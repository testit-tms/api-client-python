# coding: utf-8

"""
    API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class WorkItemStepChangeViewModel(BaseModel):
    """
    WorkItemStepChangeViewModel
    """
    action: StrictStr = Field(...)
    expected: StrictStr = Field(...)
    comments: StrictStr = Field(...)
    test_data: StrictStr = Field(default=..., alias="testData")
    index: StrictInt = Field(...)
    work_item_id: Optional[StrictStr] = Field(default=None, alias="workItemId")
    work_item: SharedStepChangeViewModel = Field(default=..., alias="workItem")
    __properties = ["action", "expected", "comments", "testData", "index", "workItemId", "workItem"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WorkItemStepChangeViewModel:
        """Create an instance of WorkItemStepChangeViewModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of work_item
        if self.work_item:
            _dict['workItem'] = self.work_item.to_dict()
        # set to None if work_item_id (nullable) is None
        # and __fields_set__ contains the field
        if self.work_item_id is None and "work_item_id" in self.__fields_set__:
            _dict['workItemId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WorkItemStepChangeViewModel:
        """Create an instance of WorkItemStepChangeViewModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WorkItemStepChangeViewModel.parse_obj(obj)

        _obj = WorkItemStepChangeViewModel.parse_obj({
            "action": obj.get("action"),
            "expected": obj.get("expected"),
            "comments": obj.get("comments"),
            "test_data": obj.get("testData"),
            "index": obj.get("index"),
            "work_item_id": obj.get("workItemId"),
            "work_item": SharedStepChangeViewModel.from_dict(obj.get("workItem")) if obj.get("workItem") is not None else None
        })
        return _obj

from testit_api_client.models.shared_step_change_view_model import SharedStepChangeViewModel
WorkItemStepChangeViewModel.update_forward_refs()

