# coding: utf-8

"""
    API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from testit_api_client.models.attachment_model import AttachmentModel
from testit_api_client.models.attachment_model_auto_test_step_results_model import AttachmentModelAutoTestStepResultsModel
from testit_api_client.models.auto_test_model import AutoTestModel
from testit_api_client.models.link_model import LinkModel
from testit_api_client.models.step_comment_model import StepCommentModel
from testit_api_client.models.step_result_model import StepResultModel
from testit_api_client.models.test_point_put_model import TestPointPutModel
from testit_api_client.models.test_result_outcome import TestResultOutcome
from testit_api_client.models.test_status_model import TestStatusModel
from typing import Optional, Set
from typing_extensions import Self

class TestResultModel(BaseModel):
    """
    TestResultModel
    """ # noqa: E501
    auto_test_id: Optional[StrictStr] = Field(default=None, alias="autoTestId")
    configuration_id: StrictStr = Field(alias="configurationId")
    started_on: Optional[datetime] = Field(default=None, alias="startedOn")
    completed_on: Optional[datetime] = Field(default=None, alias="completedOn")
    duration_in_ms: Optional[StrictInt] = Field(default=None, alias="durationInMs")
    traces: Optional[StrictStr] = None
    failure_type: Optional[StrictStr] = Field(default=None, alias="failureType")
    message: Optional[StrictStr] = None
    run_by_user_id: Optional[StrictStr] = Field(default=None, alias="runByUserId")
    stopped_by_user_id: Optional[StrictStr] = Field(default=None, alias="stoppedByUserId")
    test_point_id: StrictStr = Field(alias="testPointId")
    test_run_id: StrictStr = Field(alias="testRunId")
    test_point: Optional[TestPointPutModel] = Field(default=None, alias="testPoint")
    auto_test: Optional[AutoTestModel] = Field(default=None, alias="autoTest")
    auto_test_step_results: Optional[List[AttachmentModelAutoTestStepResultsModel]] = Field(default=None, alias="autoTestStepResults")
    setup_results: Optional[List[AttachmentModelAutoTestStepResultsModel]] = Field(default=None, alias="setupResults")
    teardown_results: Optional[List[AttachmentModelAutoTestStepResultsModel]] = Field(default=None, alias="teardownResults")
    work_item_version_id: StrictStr = Field(alias="workItemVersionId")
    work_item_version_number: Optional[StrictInt] = Field(default=None, alias="workItemVersionNumber")
    parameters: Optional[Dict[str, StrictStr]] = None
    properties: Optional[Dict[str, StrictStr]] = None
    id: StrictStr
    created_date: datetime = Field(alias="createdDate")
    modified_date: Optional[datetime] = Field(default=None, alias="modifiedDate")
    created_by_id: StrictStr = Field(alias="createdById")
    modified_by_id: Optional[StrictStr] = Field(default=None, alias="modifiedById")
    step_comments: Optional[List[StepCommentModel]] = Field(default=None, alias="stepComments")
    failure_class_ids: List[StrictStr] = Field(alias="failureClassIds")
    outcome: Optional[TestResultOutcome] = None
    status: Optional[TestStatusModel] = None
    comment: Optional[StrictStr] = None
    links: Optional[List[LinkModel]] = None
    step_results: Optional[List[StepResultModel]] = Field(default=None, alias="stepResults")
    attachments: Optional[List[AttachmentModel]] = None
    __properties: ClassVar[List[str]] = ["autoTestId", "configurationId", "startedOn", "completedOn", "durationInMs", "traces", "failureType", "message", "runByUserId", "stoppedByUserId", "testPointId", "testRunId", "testPoint", "autoTest", "autoTestStepResults", "setupResults", "teardownResults", "workItemVersionId", "workItemVersionNumber", "parameters", "properties", "id", "createdDate", "modifiedDate", "createdById", "modifiedById", "stepComments", "failureClassIds", "outcome", "status", "comment", "links", "stepResults", "attachments"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TestResultModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of test_point
        if self.test_point:
            _dict['testPoint'] = self.test_point.to_dict()
        # override the default output from pydantic by calling `to_dict()` of auto_test
        if self.auto_test:
            _dict['autoTest'] = self.auto_test.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in auto_test_step_results (list)
        _items = []
        if self.auto_test_step_results:
            for _item_auto_test_step_results in self.auto_test_step_results:
                if _item_auto_test_step_results:
                    _items.append(_item_auto_test_step_results.to_dict())
            _dict['autoTestStepResults'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in setup_results (list)
        _items = []
        if self.setup_results:
            for _item_setup_results in self.setup_results:
                if _item_setup_results:
                    _items.append(_item_setup_results.to_dict())
            _dict['setupResults'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in teardown_results (list)
        _items = []
        if self.teardown_results:
            for _item_teardown_results in self.teardown_results:
                if _item_teardown_results:
                    _items.append(_item_teardown_results.to_dict())
            _dict['teardownResults'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in step_comments (list)
        _items = []
        if self.step_comments:
            for _item_step_comments in self.step_comments:
                if _item_step_comments:
                    _items.append(_item_step_comments.to_dict())
            _dict['stepComments'] = _items
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item_links in self.links:
                if _item_links:
                    _items.append(_item_links.to_dict())
            _dict['links'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in step_results (list)
        _items = []
        if self.step_results:
            for _item_step_results in self.step_results:
                if _item_step_results:
                    _items.append(_item_step_results.to_dict())
            _dict['stepResults'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        # set to None if auto_test_id (nullable) is None
        # and model_fields_set contains the field
        if self.auto_test_id is None and "auto_test_id" in self.model_fields_set:
            _dict['autoTestId'] = None

        # set to None if started_on (nullable) is None
        # and model_fields_set contains the field
        if self.started_on is None and "started_on" in self.model_fields_set:
            _dict['startedOn'] = None

        # set to None if completed_on (nullable) is None
        # and model_fields_set contains the field
        if self.completed_on is None and "completed_on" in self.model_fields_set:
            _dict['completedOn'] = None

        # set to None if duration_in_ms (nullable) is None
        # and model_fields_set contains the field
        if self.duration_in_ms is None and "duration_in_ms" in self.model_fields_set:
            _dict['durationInMs'] = None

        # set to None if traces (nullable) is None
        # and model_fields_set contains the field
        if self.traces is None and "traces" in self.model_fields_set:
            _dict['traces'] = None

        # set to None if failure_type (nullable) is None
        # and model_fields_set contains the field
        if self.failure_type is None and "failure_type" in self.model_fields_set:
            _dict['failureType'] = None

        # set to None if message (nullable) is None
        # and model_fields_set contains the field
        if self.message is None and "message" in self.model_fields_set:
            _dict['message'] = None

        # set to None if run_by_user_id (nullable) is None
        # and model_fields_set contains the field
        if self.run_by_user_id is None and "run_by_user_id" in self.model_fields_set:
            _dict['runByUserId'] = None

        # set to None if stopped_by_user_id (nullable) is None
        # and model_fields_set contains the field
        if self.stopped_by_user_id is None and "stopped_by_user_id" in self.model_fields_set:
            _dict['stoppedByUserId'] = None

        # set to None if test_point (nullable) is None
        # and model_fields_set contains the field
        if self.test_point is None and "test_point" in self.model_fields_set:
            _dict['testPoint'] = None

        # set to None if auto_test (nullable) is None
        # and model_fields_set contains the field
        if self.auto_test is None and "auto_test" in self.model_fields_set:
            _dict['autoTest'] = None

        # set to None if auto_test_step_results (nullable) is None
        # and model_fields_set contains the field
        if self.auto_test_step_results is None and "auto_test_step_results" in self.model_fields_set:
            _dict['autoTestStepResults'] = None

        # set to None if setup_results (nullable) is None
        # and model_fields_set contains the field
        if self.setup_results is None and "setup_results" in self.model_fields_set:
            _dict['setupResults'] = None

        # set to None if teardown_results (nullable) is None
        # and model_fields_set contains the field
        if self.teardown_results is None and "teardown_results" in self.model_fields_set:
            _dict['teardownResults'] = None

        # set to None if work_item_version_number (nullable) is None
        # and model_fields_set contains the field
        if self.work_item_version_number is None and "work_item_version_number" in self.model_fields_set:
            _dict['workItemVersionNumber'] = None

        # set to None if parameters (nullable) is None
        # and model_fields_set contains the field
        if self.parameters is None and "parameters" in self.model_fields_set:
            _dict['parameters'] = None

        # set to None if properties (nullable) is None
        # and model_fields_set contains the field
        if self.properties is None and "properties" in self.model_fields_set:
            _dict['properties'] = None

        # set to None if modified_date (nullable) is None
        # and model_fields_set contains the field
        if self.modified_date is None and "modified_date" in self.model_fields_set:
            _dict['modifiedDate'] = None

        # set to None if modified_by_id (nullable) is None
        # and model_fields_set contains the field
        if self.modified_by_id is None and "modified_by_id" in self.model_fields_set:
            _dict['modifiedById'] = None

        # set to None if step_comments (nullable) is None
        # and model_fields_set contains the field
        if self.step_comments is None and "step_comments" in self.model_fields_set:
            _dict['stepComments'] = None

        # set to None if outcome (nullable) is None
        # and model_fields_set contains the field
        if self.outcome is None and "outcome" in self.model_fields_set:
            _dict['outcome'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if comment (nullable) is None
        # and model_fields_set contains the field
        if self.comment is None and "comment" in self.model_fields_set:
            _dict['comment'] = None

        # set to None if links (nullable) is None
        # and model_fields_set contains the field
        if self.links is None and "links" in self.model_fields_set:
            _dict['links'] = None

        # set to None if step_results (nullable) is None
        # and model_fields_set contains the field
        if self.step_results is None and "step_results" in self.model_fields_set:
            _dict['stepResults'] = None

        # set to None if attachments (nullable) is None
        # and model_fields_set contains the field
        if self.attachments is None and "attachments" in self.model_fields_set:
            _dict['attachments'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TestResultModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoTestId": obj.get("autoTestId"),
            "configurationId": obj.get("configurationId"),
            "startedOn": obj.get("startedOn"),
            "completedOn": obj.get("completedOn"),
            "durationInMs": obj.get("durationInMs"),
            "traces": obj.get("traces"),
            "failureType": obj.get("failureType"),
            "message": obj.get("message"),
            "runByUserId": obj.get("runByUserId"),
            "stoppedByUserId": obj.get("stoppedByUserId"),
            "testPointId": obj.get("testPointId"),
            "testRunId": obj.get("testRunId"),
            "testPoint": TestPointPutModel.from_dict(obj["testPoint"]) if obj.get("testPoint") is not None else None,
            "autoTest": AutoTestModel.from_dict(obj["autoTest"]) if obj.get("autoTest") is not None else None,
            "autoTestStepResults": [AttachmentModelAutoTestStepResultsModel.from_dict(_item) for _item in obj["autoTestStepResults"]] if obj.get("autoTestStepResults") is not None else None,
            "setupResults": [AttachmentModelAutoTestStepResultsModel.from_dict(_item) for _item in obj["setupResults"]] if obj.get("setupResults") is not None else None,
            "teardownResults": [AttachmentModelAutoTestStepResultsModel.from_dict(_item) for _item in obj["teardownResults"]] if obj.get("teardownResults") is not None else None,
            "workItemVersionId": obj.get("workItemVersionId"),
            "workItemVersionNumber": obj.get("workItemVersionNumber"),
            "parameters": obj.get("parameters"),
            "properties": obj.get("properties"),
            "id": obj.get("id"),
            "createdDate": obj.get("createdDate"),
            "modifiedDate": obj.get("modifiedDate"),
            "createdById": obj.get("createdById"),
            "modifiedById": obj.get("modifiedById"),
            "stepComments": [StepCommentModel.from_dict(_item) for _item in obj["stepComments"]] if obj.get("stepComments") is not None else None,
            "failureClassIds": obj.get("failureClassIds"),
            "outcome": obj.get("outcome"),
            "status": TestStatusModel.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "comment": obj.get("comment"),
            "links": [LinkModel.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None,
            "stepResults": [StepResultModel.from_dict(_item) for _item in obj["stepResults"]] if obj.get("stepResults") is not None else None,
            "attachments": [AttachmentModel.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None
        })
        return _obj


