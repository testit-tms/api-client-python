# coding: utf-8

"""
    API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from testit_api_client.models.test_plan_group_by_status import TestPlanGroupByStatus
from testit_api_client.models.test_plan_group_by_test_suite import TestPlanGroupByTestSuite
from testit_api_client.models.test_plan_group_by_tester import TestPlanGroupByTester
from testit_api_client.models.test_plan_group_by_tester_and_status import TestPlanGroupByTesterAndStatus
from typing import Optional, Set
from typing_extensions import Self

class TestPointAnalyticResult(BaseModel):
    """
    TestPointAnalyticResult
    """ # noqa: E501
    count_group_by_status: List[TestPlanGroupByStatus] = Field(alias="countGroupByStatus")
    sum_group_by_tester: List[TestPlanGroupByTester] = Field(alias="sumGroupByTester")
    count_group_by_tester: List[TestPlanGroupByTester] = Field(alias="countGroupByTester")
    count_group_by_test_suite: List[TestPlanGroupByTestSuite] = Field(alias="countGroupByTestSuite")
    count_group_by_tester_and_status: List[TestPlanGroupByTesterAndStatus] = Field(alias="countGroupByTesterAndStatus")
    __properties: ClassVar[List[str]] = ["countGroupByStatus", "sumGroupByTester", "countGroupByTester", "countGroupByTestSuite", "countGroupByTesterAndStatus"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TestPointAnalyticResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in count_group_by_status (list)
        _items = []
        if self.count_group_by_status:
            for _item_count_group_by_status in self.count_group_by_status:
                if _item_count_group_by_status:
                    _items.append(_item_count_group_by_status.to_dict())
            _dict['countGroupByStatus'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sum_group_by_tester (list)
        _items = []
        if self.sum_group_by_tester:
            for _item_sum_group_by_tester in self.sum_group_by_tester:
                if _item_sum_group_by_tester:
                    _items.append(_item_sum_group_by_tester.to_dict())
            _dict['sumGroupByTester'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in count_group_by_tester (list)
        _items = []
        if self.count_group_by_tester:
            for _item_count_group_by_tester in self.count_group_by_tester:
                if _item_count_group_by_tester:
                    _items.append(_item_count_group_by_tester.to_dict())
            _dict['countGroupByTester'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in count_group_by_test_suite (list)
        _items = []
        if self.count_group_by_test_suite:
            for _item_count_group_by_test_suite in self.count_group_by_test_suite:
                if _item_count_group_by_test_suite:
                    _items.append(_item_count_group_by_test_suite.to_dict())
            _dict['countGroupByTestSuite'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in count_group_by_tester_and_status (list)
        _items = []
        if self.count_group_by_tester_and_status:
            for _item_count_group_by_tester_and_status in self.count_group_by_tester_and_status:
                if _item_count_group_by_tester_and_status:
                    _items.append(_item_count_group_by_tester_and_status.to_dict())
            _dict['countGroupByTesterAndStatus'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TestPointAnalyticResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "countGroupByStatus": [TestPlanGroupByStatus.from_dict(_item) for _item in obj["countGroupByStatus"]] if obj.get("countGroupByStatus") is not None else None,
            "sumGroupByTester": [TestPlanGroupByTester.from_dict(_item) for _item in obj["sumGroupByTester"]] if obj.get("sumGroupByTester") is not None else None,
            "countGroupByTester": [TestPlanGroupByTester.from_dict(_item) for _item in obj["countGroupByTester"]] if obj.get("countGroupByTester") is not None else None,
            "countGroupByTestSuite": [TestPlanGroupByTestSuite.from_dict(_item) for _item in obj["countGroupByTestSuite"]] if obj.get("countGroupByTestSuite") is not None else None,
            "countGroupByTesterAndStatus": [TestPlanGroupByTesterAndStatus.from_dict(_item) for _item in obj["countGroupByTesterAndStatus"]] if obj.get("countGroupByTesterAndStatus") is not None else None
        })
        return _obj


