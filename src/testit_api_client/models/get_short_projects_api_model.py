# coding: utf-8

"""
    API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from testit_api_client.models.inquiry import Inquiry

class GetShortProjectsApiModel(BaseModel):
    """
    GetShortProjectsApiModel
    """
    inquiry: Optional[Inquiry] = None
    permission_name: Optional[StrictStr] = Field(default=None, alias="permissionName")
    permission_type: Optional[StrictStr] = Field(default=None, alias="permissionType")
    __properties = ["inquiry", "permissionName", "permissionType"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetShortProjectsApiModel:
        """Create an instance of GetShortProjectsApiModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of inquiry
        if self.inquiry:
            _dict['inquiry'] = self.inquiry.to_dict()
        # set to None if inquiry (nullable) is None
        # and __fields_set__ contains the field
        if self.inquiry is None and "inquiry" in self.__fields_set__:
            _dict['inquiry'] = None

        # set to None if permission_name (nullable) is None
        # and __fields_set__ contains the field
        if self.permission_name is None and "permission_name" in self.__fields_set__:
            _dict['permissionName'] = None

        # set to None if permission_type (nullable) is None
        # and __fields_set__ contains the field
        if self.permission_type is None and "permission_type" in self.__fields_set__:
            _dict['permissionType'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetShortProjectsApiModel:
        """Create an instance of GetShortProjectsApiModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetShortProjectsApiModel.parse_obj(obj)

        _obj = GetShortProjectsApiModel.parse_obj({
            "inquiry": Inquiry.from_dict(obj.get("inquiry")) if obj.get("inquiry") is not None else None,
            "permission_name": obj.get("permissionName"),
            "permission_type": obj.get("permissionType")
        })
        return _obj


