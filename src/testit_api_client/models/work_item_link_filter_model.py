# coding: utf-8

"""
    API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from testit_api_client.models.link_type import LinkType

class WorkItemLinkFilterModel(BaseModel):
    """
    WorkItemLinkFilterModel
    """
    types: Optional[conlist(LinkType)] = None
    title: Optional[StrictStr] = None
    urls: Optional[conlist(StrictStr, unique_items=True)] = None
    only_without_links: Optional[StrictBool] = Field(default=None, alias="onlyWithoutLinks")
    __properties = ["types", "title", "urls", "onlyWithoutLinks"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WorkItemLinkFilterModel:
        """Create an instance of WorkItemLinkFilterModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if types (nullable) is None
        # and __fields_set__ contains the field
        if self.types is None and "types" in self.__fields_set__:
            _dict['types'] = None

        # set to None if title (nullable) is None
        # and __fields_set__ contains the field
        if self.title is None and "title" in self.__fields_set__:
            _dict['title'] = None

        # set to None if urls (nullable) is None
        # and __fields_set__ contains the field
        if self.urls is None and "urls" in self.__fields_set__:
            _dict['urls'] = None

        # set to None if only_without_links (nullable) is None
        # and __fields_set__ contains the field
        if self.only_without_links is None and "only_without_links" in self.__fields_set__:
            _dict['onlyWithoutLinks'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WorkItemLinkFilterModel:
        """Create an instance of WorkItemLinkFilterModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WorkItemLinkFilterModel.parse_obj(obj)

        _obj = WorkItemLinkFilterModel.parse_obj({
            "types": obj.get("types"),
            "title": obj.get("title"),
            "urls": obj.get("urls"),
            "only_without_links": obj.get("onlyWithoutLinks")
        })
        return _obj


