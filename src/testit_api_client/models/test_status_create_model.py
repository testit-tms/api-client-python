# coding: utf-8

"""
    API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, constr
from testit_api_client.models.test_status_type import TestStatusType

class TestStatusCreateModel(BaseModel):
    """
    TestStatusCreateModel
    """
    name: constr(strict=True, max_length=100, min_length=0) = Field(...)
    type: TestStatusType = Field(...)
    code: constr(strict=True, max_length=100, min_length=0) = Field(...)
    description: Optional[constr(strict=True, max_length=255, min_length=0)] = None
    __properties = ["name", "type", "code", "description"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TestStatusCreateModel:
        """Create an instance of TestStatusCreateModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TestStatusCreateModel:
        """Create an instance of TestStatusCreateModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TestStatusCreateModel.parse_obj(obj)

        _obj = TestStatusCreateModel.parse_obj({
            "name": obj.get("name"),
            "type": obj.get("type"),
            "code": obj.get("code"),
            "description": obj.get("description")
        })
        return _obj


