# coding: utf-8

"""
    API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class ExternalFormAllowedValueModel(BaseModel):
    """
    ExternalFormAllowedValueModel
    """
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    parent_id: Optional[StrictStr] = Field(default=None, alias="parentId")
    has_children: StrictBool = Field(default=..., alias="hasChildren")
    __properties = ["id", "name", "parentId", "hasChildren"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ExternalFormAllowedValueModel:
        """Create an instance of ExternalFormAllowedValueModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if id (nullable) is None
        # and __fields_set__ contains the field
        if self.id is None and "id" in self.__fields_set__:
            _dict['id'] = None

        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict['name'] = None

        # set to None if parent_id (nullable) is None
        # and __fields_set__ contains the field
        if self.parent_id is None and "parent_id" in self.__fields_set__:
            _dict['parentId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ExternalFormAllowedValueModel:
        """Create an instance of ExternalFormAllowedValueModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ExternalFormAllowedValueModel.parse_obj(obj)

        _obj = ExternalFormAllowedValueModel.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "parent_id": obj.get("parentId"),
            "has_children": obj.get("hasChildren")
        })
        return _obj


