# coding: utf-8

"""
    API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field
from testit_api_client.models.test_results_statistics_failure_categories_api_result import TestResultsStatisticsFailureCategoriesApiResult
from testit_api_client.models.test_results_statistics_statuses_api_result import TestResultsStatisticsStatusesApiResult

class TestResultsStatisticsApiResult(BaseModel):
    """
    TestResultsStatisticsApiResult
    """
    statuses: TestResultsStatisticsStatusesApiResult = Field(default=..., description="Test results counts aggregated by outcome")
    failure_categories: TestResultsStatisticsFailureCategoriesApiResult = Field(default=..., alias="failureCategories", description="Test results counts aggregated by result failure categories")
    __properties = ["statuses", "failureCategories"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TestResultsStatisticsApiResult:
        """Create an instance of TestResultsStatisticsApiResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "statuses",
                            "failure_categories",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of statuses
        if self.statuses:
            _dict['statuses'] = self.statuses.to_dict()
        # override the default output from pydantic by calling `to_dict()` of failure_categories
        if self.failure_categories:
            _dict['failureCategories'] = self.failure_categories.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TestResultsStatisticsApiResult:
        """Create an instance of TestResultsStatisticsApiResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TestResultsStatisticsApiResult.parse_obj(obj)

        _obj = TestResultsStatisticsApiResult.parse_obj({
            "statuses": TestResultsStatisticsStatusesApiResult.from_dict(obj.get("statuses")) if obj.get("statuses") is not None else None,
            "failure_categories": TestResultsStatisticsFailureCategoriesApiResult.from_dict(obj.get("failureCategories")) if obj.get("failureCategories") is not None else None
        })
        return _obj


