# coding: utf-8

"""
    API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class GlobalSearchItemResult(BaseModel):
    """
    GlobalSearchItemResult
    """
    resource_type: StrictStr = Field(default=..., alias="resourceType")
    resource_id: StrictStr = Field(default=..., alias="resourceId")
    global_id: Optional[StrictInt] = Field(default=None, alias="globalId")
    name: StrictStr = Field(...)
    project_global_id: StrictInt = Field(default=..., alias="projectGlobalId")
    __properties = ["resourceType", "resourceId", "globalId", "name", "projectGlobalId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GlobalSearchItemResult:
        """Create an instance of GlobalSearchItemResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if global_id (nullable) is None
        # and __fields_set__ contains the field
        if self.global_id is None and "global_id" in self.__fields_set__:
            _dict['globalId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GlobalSearchItemResult:
        """Create an instance of GlobalSearchItemResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GlobalSearchItemResult.parse_obj(obj)

        _obj = GlobalSearchItemResult.parse_obj({
            "resource_type": obj.get("resourceType"),
            "resource_id": obj.get("resourceId"),
            "global_id": obj.get("globalId"),
            "name": obj.get("name"),
            "project_global_id": obj.get("projectGlobalId")
        })
        return _obj


