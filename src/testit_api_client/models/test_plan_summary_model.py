# coding: utf-8

"""
    API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TestPlanSummaryModel(BaseModel):
    """
    TestPlanSummaryModel
    """ # noqa: E501
    total_test_points_count: StrictInt = Field(alias="totalTestPointsCount")
    manual_test_points_count: StrictInt = Field(alias="manualTestPointsCount")
    automated_test_points_count: StrictInt = Field(alias="automatedTestPointsCount")
    completed_test_points_count: StrictInt = Field(alias="completedTestPointsCount")
    defects_count: StrictInt = Field(alias="defectsCount")
    planned_test_points_duration: StrictInt = Field(alias="plannedTestPointsDuration")
    spent_test_points_duration: Optional[StrictInt] = Field(default=None, alias="spentTestPointsDuration")
    __properties: ClassVar[List[str]] = ["totalTestPointsCount", "manualTestPointsCount", "automatedTestPointsCount", "completedTestPointsCount", "defectsCount", "plannedTestPointsDuration", "spentTestPointsDuration"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TestPlanSummaryModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if spent_test_points_duration (nullable) is None
        # and model_fields_set contains the field
        if self.spent_test_points_duration is None and "spent_test_points_duration" in self.model_fields_set:
            _dict['spentTestPointsDuration'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TestPlanSummaryModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "totalTestPointsCount": obj.get("totalTestPointsCount"),
            "manualTestPointsCount": obj.get("manualTestPointsCount"),
            "automatedTestPointsCount": obj.get("automatedTestPointsCount"),
            "completedTestPointsCount": obj.get("completedTestPointsCount"),
            "defectsCount": obj.get("defectsCount"),
            "plannedTestPointsDuration": obj.get("plannedTestPointsDuration"),
            "spentTestPointsDuration": obj.get("spentTestPointsDuration")
        })
        return _obj


