# coding: utf-8

"""
    API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist

class TestSuiteWithChildrenModel(BaseModel):
    """
    TestSuiteWithChildrenModel
    """
    children: Optional[conlist(TestSuiteWithChildrenModel)] = None
    tester_id: Optional[StrictStr] = Field(default=None, alias="testerId")
    parent_id: Optional[StrictStr] = Field(default=None, alias="parentId")
    test_plan_id: StrictStr = Field(default=..., alias="testPlanId")
    name: StrictStr = Field(...)
    id: StrictStr = Field(default=..., description="Unique ID of the entity")
    is_deleted: StrictBool = Field(default=..., alias="isDeleted", description="Indicates if the entity is deleted")
    __properties = ["children", "testerId", "parentId", "testPlanId", "name", "id", "isDeleted"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TestSuiteWithChildrenModel:
        """Create an instance of TestSuiteWithChildrenModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in children (list)
        _items = []
        if self.children:
            for _item in self.children:
                if _item:
                    _items.append(_item.to_dict())
            _dict['children'] = _items
        # set to None if children (nullable) is None
        # and __fields_set__ contains the field
        if self.children is None and "children" in self.__fields_set__:
            _dict['children'] = None

        # set to None if tester_id (nullable) is None
        # and __fields_set__ contains the field
        if self.tester_id is None and "tester_id" in self.__fields_set__:
            _dict['testerId'] = None

        # set to None if parent_id (nullable) is None
        # and __fields_set__ contains the field
        if self.parent_id is None and "parent_id" in self.__fields_set__:
            _dict['parentId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TestSuiteWithChildrenModel:
        """Create an instance of TestSuiteWithChildrenModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TestSuiteWithChildrenModel.parse_obj(obj)

        _obj = TestSuiteWithChildrenModel.parse_obj({
            "children": [TestSuiteWithChildrenModel.from_dict(_item) for _item in obj.get("children")] if obj.get("children") is not None else None,
            "tester_id": obj.get("testerId"),
            "parent_id": obj.get("parentId"),
            "test_plan_id": obj.get("testPlanId"),
            "name": obj.get("name"),
            "id": obj.get("id"),
            "is_deleted": obj.get("isDeleted")
        })
        return _obj

TestSuiteWithChildrenModel.update_forward_refs()

