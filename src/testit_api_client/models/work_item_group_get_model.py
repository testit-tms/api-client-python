# coding: utf-8

"""
    API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from testit_api_client.models.work_item_group_type import WorkItemGroupType
from testit_api_client.models.work_item_local_select_model import WorkItemLocalSelectModel

class WorkItemGroupGetModel(BaseModel):
    """
    WorkItemGroupGetModel
    """
    select_model: Optional[WorkItemLocalSelectModel] = Field(default=None, alias="selectModel", description="Model containing options to filter work items")
    group_type: WorkItemGroupType = Field(default=..., alias="groupType")
    custom_attribute_id: Optional[StrictStr] = Field(default=None, alias="customAttributeId")
    __properties = ["selectModel", "groupType", "customAttributeId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WorkItemGroupGetModel:
        """Create an instance of WorkItemGroupGetModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of select_model
        if self.select_model:
            _dict['selectModel'] = self.select_model.to_dict()
        # set to None if select_model (nullable) is None
        # and __fields_set__ contains the field
        if self.select_model is None and "select_model" in self.__fields_set__:
            _dict['selectModel'] = None

        # set to None if custom_attribute_id (nullable) is None
        # and __fields_set__ contains the field
        if self.custom_attribute_id is None and "custom_attribute_id" in self.__fields_set__:
            _dict['customAttributeId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WorkItemGroupGetModel:
        """Create an instance of WorkItemGroupGetModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WorkItemGroupGetModel.parse_obj(obj)

        _obj = WorkItemGroupGetModel.parse_obj({
            "select_model": WorkItemLocalSelectModel.from_dict(obj.get("selectModel")) if obj.get("selectModel") is not None else None,
            "group_type": obj.get("groupType"),
            "custom_attribute_id": obj.get("customAttributeId")
        })
        return _obj


