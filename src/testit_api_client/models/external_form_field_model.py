# coding: utf-8

"""
    API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class ExternalFormFieldModel(BaseModel):
    """
    ExternalFormFieldModel
    """
    field_id: Optional[StrictStr] = Field(default=None, alias="fieldId")
    field_name: Optional[StrictStr] = Field(default=None, alias="fieldName")
    help_text: Optional[StrictStr] = Field(default=None, alias="helpText")
    type: Optional[StrictStr] = None
    array_values_type: Optional[StrictStr] = Field(default=None, alias="arrayValuesType")
    default_value: Optional[Any] = Field(default=None, alias="defaultValue")
    is_custom_value_allowed: StrictBool = Field(default=..., alias="isCustomValueAllowed")
    auto_complete_url: Optional[StrictStr] = Field(default=None, alias="autoCompleteUrl")
    control_type: Optional[StrictStr] = Field(default=None, alias="controlType")
    min_length: Optional[StrictInt] = Field(default=None, alias="minLength")
    max_length: Optional[StrictInt] = Field(default=None, alias="maxLength")
    is_required: Optional[StrictBool] = Field(default=None, alias="isRequired")
    min: Optional[Any] = None
    max: Optional[Any] = None
    __properties = ["fieldId", "fieldName", "helpText", "type", "arrayValuesType", "defaultValue", "isCustomValueAllowed", "autoCompleteUrl", "controlType", "minLength", "maxLength", "isRequired", "min", "max"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ExternalFormFieldModel:
        """Create an instance of ExternalFormFieldModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if field_id (nullable) is None
        # and __fields_set__ contains the field
        if self.field_id is None and "field_id" in self.__fields_set__:
            _dict['fieldId'] = None

        # set to None if field_name (nullable) is None
        # and __fields_set__ contains the field
        if self.field_name is None and "field_name" in self.__fields_set__:
            _dict['fieldName'] = None

        # set to None if help_text (nullable) is None
        # and __fields_set__ contains the field
        if self.help_text is None and "help_text" in self.__fields_set__:
            _dict['helpText'] = None

        # set to None if type (nullable) is None
        # and __fields_set__ contains the field
        if self.type is None and "type" in self.__fields_set__:
            _dict['type'] = None

        # set to None if array_values_type (nullable) is None
        # and __fields_set__ contains the field
        if self.array_values_type is None and "array_values_type" in self.__fields_set__:
            _dict['arrayValuesType'] = None

        # set to None if default_value (nullable) is None
        # and __fields_set__ contains the field
        if self.default_value is None and "default_value" in self.__fields_set__:
            _dict['defaultValue'] = None

        # set to None if auto_complete_url (nullable) is None
        # and __fields_set__ contains the field
        if self.auto_complete_url is None and "auto_complete_url" in self.__fields_set__:
            _dict['autoCompleteUrl'] = None

        # set to None if control_type (nullable) is None
        # and __fields_set__ contains the field
        if self.control_type is None and "control_type" in self.__fields_set__:
            _dict['controlType'] = None

        # set to None if min_length (nullable) is None
        # and __fields_set__ contains the field
        if self.min_length is None and "min_length" in self.__fields_set__:
            _dict['minLength'] = None

        # set to None if max_length (nullable) is None
        # and __fields_set__ contains the field
        if self.max_length is None and "max_length" in self.__fields_set__:
            _dict['maxLength'] = None

        # set to None if is_required (nullable) is None
        # and __fields_set__ contains the field
        if self.is_required is None and "is_required" in self.__fields_set__:
            _dict['isRequired'] = None

        # set to None if min (nullable) is None
        # and __fields_set__ contains the field
        if self.min is None and "min" in self.__fields_set__:
            _dict['min'] = None

        # set to None if max (nullable) is None
        # and __fields_set__ contains the field
        if self.max is None and "max" in self.__fields_set__:
            _dict['max'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ExternalFormFieldModel:
        """Create an instance of ExternalFormFieldModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ExternalFormFieldModel.parse_obj(obj)

        _obj = ExternalFormFieldModel.parse_obj({
            "field_id": obj.get("fieldId"),
            "field_name": obj.get("fieldName"),
            "help_text": obj.get("helpText"),
            "type": obj.get("type"),
            "array_values_type": obj.get("arrayValuesType"),
            "default_value": obj.get("defaultValue"),
            "is_custom_value_allowed": obj.get("isCustomValueAllowed"),
            "auto_complete_url": obj.get("autoCompleteUrl"),
            "control_type": obj.get("controlType"),
            "min_length": obj.get("minLength"),
            "max_length": obj.get("maxLength"),
            "is_required": obj.get("isRequired"),
            "min": obj.get("min"),
            "max": obj.get("max")
        })
        return _obj


