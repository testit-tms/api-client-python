# coding: utf-8

"""
    API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field, StrictInt

class TestPlanTestPointsGroupApiResult(BaseModel):
    """
    TestPlanTestPointsGroupApiResult
    """
    field_value: Optional[Any] = Field(default=..., alias="fieldValue")
    display_field_value: Optional[Any] = Field(default=..., alias="displayFieldValue")
    count: StrictInt = Field(...)
    __properties = ["fieldValue", "displayFieldValue", "count"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TestPlanTestPointsGroupApiResult:
        """Create an instance of TestPlanTestPointsGroupApiResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if field_value (nullable) is None
        # and __fields_set__ contains the field
        if self.field_value is None and "field_value" in self.__fields_set__:
            _dict['fieldValue'] = None

        # set to None if display_field_value (nullable) is None
        # and __fields_set__ contains the field
        if self.display_field_value is None and "display_field_value" in self.__fields_set__:
            _dict['displayFieldValue'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TestPlanTestPointsGroupApiResult:
        """Create an instance of TestPlanTestPointsGroupApiResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TestPlanTestPointsGroupApiResult.parse_obj(obj)

        _obj = TestPlanTestPointsGroupApiResult.parse_obj({
            "field_value": obj.get("fieldValue"),
            "display_field_value": obj.get("displayFieldValue"),
            "count": obj.get("count")
        })
        return _obj


