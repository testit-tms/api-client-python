# coding: utf-8

"""
    API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr
from testit_api_client.models.external_service_category_api_result import ExternalServiceCategoryApiResult

class ExternalServiceMetadataApiResult(BaseModel):
    """
    ExternalServiceMetadataApiResult
    """
    name: StrictStr = Field(default=..., description="The name of the external service")
    code: StrictStr = Field(default=..., description="The code of the external service")
    icon_url: StrictStr = Field(default=..., alias="iconUrl", description="The icon URL of the external service")
    category: ExternalServiceCategoryApiResult = Field(default=..., description="The category of the external service")
    __properties = ["name", "code", "iconUrl", "category"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ExternalServiceMetadataApiResult:
        """Create an instance of ExternalServiceMetadataApiResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ExternalServiceMetadataApiResult:
        """Create an instance of ExternalServiceMetadataApiResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ExternalServiceMetadataApiResult.parse_obj(obj)

        _obj = ExternalServiceMetadataApiResult.parse_obj({
            "name": obj.get("name"),
            "code": obj.get("code"),
            "icon_url": obj.get("iconUrl"),
            "category": obj.get("category")
        })
        return _obj


