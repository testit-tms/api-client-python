# coding: utf-8

"""
    API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictInt

class TestResultsStatisticsStatusesApiResult(BaseModel):
    """
    TestResultsStatisticsStatusesApiResult
    """
    in_progress: StrictInt = Field(default=..., alias="inProgress", description="Number of test results which is running currently")
    passed: StrictInt = Field(default=..., description="Number of test results which successfully passed")
    failed: StrictInt = Field(default=..., description="Number of test results which failed with an error")
    skipped: StrictInt = Field(default=..., description="Number of test results which did not run and were skipped")
    blocked: StrictInt = Field(default=..., description="Number of test results which cannot be launched")
    incomplete: StrictInt = Field(default=..., description="Number of test results which are incomplete")
    __properties = ["inProgress", "passed", "failed", "skipped", "blocked", "incomplete"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TestResultsStatisticsStatusesApiResult:
        """Create an instance of TestResultsStatisticsStatusesApiResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TestResultsStatisticsStatusesApiResult:
        """Create an instance of TestResultsStatisticsStatusesApiResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TestResultsStatisticsStatusesApiResult.parse_obj(obj)

        _obj = TestResultsStatisticsStatusesApiResult.parse_obj({
            "in_progress": obj.get("inProgress"),
            "passed": obj.get("passed"),
            "failed": obj.get("failed"),
            "skipped": obj.get("skipped"),
            "blocked": obj.get("blocked"),
            "incomplete": obj.get("incomplete")
        })
        return _obj


