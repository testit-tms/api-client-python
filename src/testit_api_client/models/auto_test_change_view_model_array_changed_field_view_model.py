# coding: utf-8

"""
    API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from testit_api_client.models.auto_test_change_view_model import AutoTestChangeViewModel

class AutoTestChangeViewModelArrayChangedFieldViewModel(BaseModel):
    """
    AutoTestChangeViewModelArrayChangedFieldViewModel
    """
    old_value: Optional[conlist(AutoTestChangeViewModel)] = Field(default=None, alias="oldValue")
    new_value: Optional[conlist(AutoTestChangeViewModel)] = Field(default=None, alias="newValue")
    __properties = ["oldValue", "newValue"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AutoTestChangeViewModelArrayChangedFieldViewModel:
        """Create an instance of AutoTestChangeViewModelArrayChangedFieldViewModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in old_value (list)
        _items = []
        if self.old_value:
            for _item in self.old_value:
                if _item:
                    _items.append(_item.to_dict())
            _dict['oldValue'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in new_value (list)
        _items = []
        if self.new_value:
            for _item in self.new_value:
                if _item:
                    _items.append(_item.to_dict())
            _dict['newValue'] = _items
        # set to None if old_value (nullable) is None
        # and __fields_set__ contains the field
        if self.old_value is None and "old_value" in self.__fields_set__:
            _dict['oldValue'] = None

        # set to None if new_value (nullable) is None
        # and __fields_set__ contains the field
        if self.new_value is None and "new_value" in self.__fields_set__:
            _dict['newValue'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AutoTestChangeViewModelArrayChangedFieldViewModel:
        """Create an instance of AutoTestChangeViewModelArrayChangedFieldViewModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AutoTestChangeViewModelArrayChangedFieldViewModel.parse_obj(obj)

        _obj = AutoTestChangeViewModelArrayChangedFieldViewModel.parse_obj({
            "old_value": [AutoTestChangeViewModel.from_dict(_item) for _item in obj.get("oldValue")] if obj.get("oldValue") is not None else None,
            "new_value": [AutoTestChangeViewModel.from_dict(_item) for _item in obj.get("newValue")] if obj.get("newValue") is not None else None
        })
        return _obj


