# coding: utf-8

"""
    API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class ExternalLinkModel(BaseModel):
    """
    ExternalLinkModel
    """
    url: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    issue_type_name: Optional[StrictStr] = Field(default=None, alias="issueTypeName")
    issue_type_icon_url: Optional[StrictStr] = Field(default=None, alias="issueTypeIconUrl")
    priority_name: Optional[StrictStr] = Field(default=None, alias="priorityName")
    priority_icon_url: Optional[StrictStr] = Field(default=None, alias="priorityIconUrl")
    status_name: Optional[StrictStr] = Field(default=None, alias="statusName")
    assignee_display_name: Optional[StrictStr] = Field(default=None, alias="assigneeDisplayName")
    __properties = ["url", "title", "issueTypeName", "issueTypeIconUrl", "priorityName", "priorityIconUrl", "statusName", "assigneeDisplayName"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ExternalLinkModel:
        """Create an instance of ExternalLinkModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if url (nullable) is None
        # and __fields_set__ contains the field
        if self.url is None and "url" in self.__fields_set__:
            _dict['url'] = None

        # set to None if title (nullable) is None
        # and __fields_set__ contains the field
        if self.title is None and "title" in self.__fields_set__:
            _dict['title'] = None

        # set to None if issue_type_name (nullable) is None
        # and __fields_set__ contains the field
        if self.issue_type_name is None and "issue_type_name" in self.__fields_set__:
            _dict['issueTypeName'] = None

        # set to None if issue_type_icon_url (nullable) is None
        # and __fields_set__ contains the field
        if self.issue_type_icon_url is None and "issue_type_icon_url" in self.__fields_set__:
            _dict['issueTypeIconUrl'] = None

        # set to None if priority_name (nullable) is None
        # and __fields_set__ contains the field
        if self.priority_name is None and "priority_name" in self.__fields_set__:
            _dict['priorityName'] = None

        # set to None if priority_icon_url (nullable) is None
        # and __fields_set__ contains the field
        if self.priority_icon_url is None and "priority_icon_url" in self.__fields_set__:
            _dict['priorityIconUrl'] = None

        # set to None if status_name (nullable) is None
        # and __fields_set__ contains the field
        if self.status_name is None and "status_name" in self.__fields_set__:
            _dict['statusName'] = None

        # set to None if assignee_display_name (nullable) is None
        # and __fields_set__ contains the field
        if self.assignee_display_name is None and "assignee_display_name" in self.__fields_set__:
            _dict['assigneeDisplayName'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ExternalLinkModel:
        """Create an instance of ExternalLinkModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ExternalLinkModel.parse_obj(obj)

        _obj = ExternalLinkModel.parse_obj({
            "url": obj.get("url"),
            "title": obj.get("title"),
            "issue_type_name": obj.get("issueTypeName"),
            "issue_type_icon_url": obj.get("issueTypeIconUrl"),
            "priority_name": obj.get("priorityName"),
            "priority_icon_url": obj.get("priorityIconUrl"),
            "status_name": obj.get("statusName"),
            "assignee_display_name": obj.get("assigneeDisplayName")
        })
        return _obj


