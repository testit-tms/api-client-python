# coding: utf-8

"""
    API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from testit_api_client.models.test_run_select_api_model import TestRunSelectApiModel
from testit_api_client.models.update_multiple_attachments_api_model import UpdateMultipleAttachmentsApiModel
from testit_api_client.models.update_multiple_links_api_model import UpdateMultipleLinksApiModel

class UpdateMultipleTestRunsApiModel(BaseModel):
    """
    UpdateMultipleTestRunsApiModel
    """
    select_model: TestRunSelectApiModel = Field(default=..., alias="selectModel", description="Test run selection model")
    description: Optional[StrictStr] = Field(default=None, description="Test run description")
    attachment_update_scheme: Optional[UpdateMultipleAttachmentsApiModel] = Field(default=None, alias="attachmentUpdateScheme", description="Set of attachment ids")
    link_update_scheme: Optional[UpdateMultipleLinksApiModel] = Field(default=None, alias="linkUpdateScheme", description="Set of links")
    __properties = ["selectModel", "description", "attachmentUpdateScheme", "linkUpdateScheme"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateMultipleTestRunsApiModel:
        """Create an instance of UpdateMultipleTestRunsApiModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of select_model
        if self.select_model:
            _dict['selectModel'] = self.select_model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of attachment_update_scheme
        if self.attachment_update_scheme:
            _dict['attachmentUpdateScheme'] = self.attachment_update_scheme.to_dict()
        # override the default output from pydantic by calling `to_dict()` of link_update_scheme
        if self.link_update_scheme:
            _dict['linkUpdateScheme'] = self.link_update_scheme.to_dict()
        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        # set to None if attachment_update_scheme (nullable) is None
        # and __fields_set__ contains the field
        if self.attachment_update_scheme is None and "attachment_update_scheme" in self.__fields_set__:
            _dict['attachmentUpdateScheme'] = None

        # set to None if link_update_scheme (nullable) is None
        # and __fields_set__ contains the field
        if self.link_update_scheme is None and "link_update_scheme" in self.__fields_set__:
            _dict['linkUpdateScheme'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateMultipleTestRunsApiModel:
        """Create an instance of UpdateMultipleTestRunsApiModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateMultipleTestRunsApiModel.parse_obj(obj)

        _obj = UpdateMultipleTestRunsApiModel.parse_obj({
            "select_model": TestRunSelectApiModel.from_dict(obj.get("selectModel")) if obj.get("selectModel") is not None else None,
            "description": obj.get("description"),
            "attachment_update_scheme": UpdateMultipleAttachmentsApiModel.from_dict(obj.get("attachmentUpdateScheme")) if obj.get("attachmentUpdateScheme") is not None else None,
            "link_update_scheme": UpdateMultipleLinksApiModel.from_dict(obj.get("linkUpdateScheme")) if obj.get("linkUpdateScheme") is not None else None
        })
        return _obj


