# coding: utf-8

"""
    API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, conlist
from testit_api_client.models.test_plan_test_points_status_group_api_result import TestPlanTestPointsStatusGroupApiResult
from testit_api_client.models.test_plan_test_points_tester_and_status_group_api_result import TestPlanTestPointsTesterAndStatusGroupApiResult
from testit_api_client.models.test_plan_test_points_tester_group_api_result import TestPlanTestPointsTesterGroupApiResult

class TestPlanTestPointsAnalyticsApiResult(BaseModel):
    """
    TestPlanTestPointsAnalyticsApiResult
    """
    count_group_by_status: conlist(TestPlanTestPointsStatusGroupApiResult) = Field(default=..., alias="countGroupByStatus")
    sum_group_by_tester: conlist(TestPlanTestPointsTesterGroupApiResult) = Field(default=..., alias="sumGroupByTester")
    count_group_by_tester: conlist(TestPlanTestPointsTesterGroupApiResult) = Field(default=..., alias="countGroupByTester")
    count_group_by_tester_and_status: conlist(TestPlanTestPointsTesterAndStatusGroupApiResult) = Field(default=..., alias="countGroupByTesterAndStatus")
    __properties = ["countGroupByStatus", "sumGroupByTester", "countGroupByTester", "countGroupByTesterAndStatus"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TestPlanTestPointsAnalyticsApiResult:
        """Create an instance of TestPlanTestPointsAnalyticsApiResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in count_group_by_status (list)
        _items = []
        if self.count_group_by_status:
            for _item in self.count_group_by_status:
                if _item:
                    _items.append(_item.to_dict())
            _dict['countGroupByStatus'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sum_group_by_tester (list)
        _items = []
        if self.sum_group_by_tester:
            for _item in self.sum_group_by_tester:
                if _item:
                    _items.append(_item.to_dict())
            _dict['sumGroupByTester'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in count_group_by_tester (list)
        _items = []
        if self.count_group_by_tester:
            for _item in self.count_group_by_tester:
                if _item:
                    _items.append(_item.to_dict())
            _dict['countGroupByTester'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in count_group_by_tester_and_status (list)
        _items = []
        if self.count_group_by_tester_and_status:
            for _item in self.count_group_by_tester_and_status:
                if _item:
                    _items.append(_item.to_dict())
            _dict['countGroupByTesterAndStatus'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TestPlanTestPointsAnalyticsApiResult:
        """Create an instance of TestPlanTestPointsAnalyticsApiResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TestPlanTestPointsAnalyticsApiResult.parse_obj(obj)

        _obj = TestPlanTestPointsAnalyticsApiResult.parse_obj({
            "count_group_by_status": [TestPlanTestPointsStatusGroupApiResult.from_dict(_item) for _item in obj.get("countGroupByStatus")] if obj.get("countGroupByStatus") is not None else None,
            "sum_group_by_tester": [TestPlanTestPointsTesterGroupApiResult.from_dict(_item) for _item in obj.get("sumGroupByTester")] if obj.get("sumGroupByTester") is not None else None,
            "count_group_by_tester": [TestPlanTestPointsTesterGroupApiResult.from_dict(_item) for _item in obj.get("countGroupByTester")] if obj.get("countGroupByTester") is not None else None,
            "count_group_by_tester_and_status": [TestPlanTestPointsTesterAndStatusGroupApiResult.from_dict(_item) for _item in obj.get("countGroupByTesterAndStatus")] if obj.get("countGroupByTesterAndStatus") is not None else None
        })
        return _obj


