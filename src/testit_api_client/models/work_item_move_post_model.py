# coding: utf-8

"""
    API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class WorkItemMovePostModel(BaseModel):
    """
    WorkItemMovePostModel
    """
    id: StrictStr = Field(...)
    new_section_id: StrictStr = Field(default=..., alias="newSectionId")
    old_section_id: Optional[StrictStr] = Field(default=None, alias="oldSectionId")
    next_work_item_id: Optional[StrictStr] = Field(default=None, alias="nextWorkItemId")
    __properties = ["id", "newSectionId", "oldSectionId", "nextWorkItemId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WorkItemMovePostModel:
        """Create an instance of WorkItemMovePostModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if old_section_id (nullable) is None
        # and __fields_set__ contains the field
        if self.old_section_id is None and "old_section_id" in self.__fields_set__:
            _dict['oldSectionId'] = None

        # set to None if next_work_item_id (nullable) is None
        # and __fields_set__ contains the field
        if self.next_work_item_id is None and "next_work_item_id" in self.__fields_set__:
            _dict['nextWorkItemId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WorkItemMovePostModel:
        """Create an instance of WorkItemMovePostModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WorkItemMovePostModel.parse_obj(obj)

        _obj = WorkItemMovePostModel.parse_obj({
            "id": obj.get("id"),
            "new_section_id": obj.get("newSectionId"),
            "old_section_id": obj.get("oldSectionId"),
            "next_work_item_id": obj.get("nextWorkItemId")
        })
        return _obj


