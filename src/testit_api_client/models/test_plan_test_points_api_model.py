# coding: utf-8

"""
    API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from testit_api_client.models.test_plan_test_points_group_api_model import TestPlanTestPointsGroupApiModel
from testit_api_client.models.test_plan_test_points_inquiry_api_model import TestPlanTestPointsInquiryApiModel
from testit_api_client.models.test_plan_test_points_search_api_model import TestPlanTestPointsSearchApiModel

class TestPlanTestPointsApiModel(BaseModel):
    """
    TestPlanTestPointsApiModel
    """
    filter: Optional[TestPlanTestPointsSearchApiModel] = None
    group: Optional[TestPlanTestPointsGroupApiModel] = None
    inquiry: Optional[TestPlanTestPointsInquiryApiModel] = None
    __properties = ["filter", "group", "inquiry"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TestPlanTestPointsApiModel:
        """Create an instance of TestPlanTestPointsApiModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of filter
        if self.filter:
            _dict['filter'] = self.filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of group
        if self.group:
            _dict['group'] = self.group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inquiry
        if self.inquiry:
            _dict['inquiry'] = self.inquiry.to_dict()
        # set to None if filter (nullable) is None
        # and __fields_set__ contains the field
        if self.filter is None and "filter" in self.__fields_set__:
            _dict['filter'] = None

        # set to None if group (nullable) is None
        # and __fields_set__ contains the field
        if self.group is None and "group" in self.__fields_set__:
            _dict['group'] = None

        # set to None if inquiry (nullable) is None
        # and __fields_set__ contains the field
        if self.inquiry is None and "inquiry" in self.__fields_set__:
            _dict['inquiry'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TestPlanTestPointsApiModel:
        """Create an instance of TestPlanTestPointsApiModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TestPlanTestPointsApiModel.parse_obj(obj)

        _obj = TestPlanTestPointsApiModel.parse_obj({
            "filter": TestPlanTestPointsSearchApiModel.from_dict(obj.get("filter")) if obj.get("filter") is not None else None,
            "group": TestPlanTestPointsGroupApiModel.from_dict(obj.get("group")) if obj.get("group") is not None else None,
            "inquiry": TestPlanTestPointsInquiryApiModel.from_dict(obj.get("inquiry")) if obj.get("inquiry") is not None else None
        })
        return _obj


