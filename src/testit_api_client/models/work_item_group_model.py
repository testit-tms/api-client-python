# coding: utf-8

"""
    API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictInt, conlist
from testit_api_client.models.work_item_short_model import WorkItemShortModel

class WorkItemGroupModel(BaseModel):
    """
    WorkItemGroupModel
    """
    key: Optional[Any] = None
    size: StrictInt = Field(...)
    work_items: conlist(WorkItemShortModel) = Field(default=..., alias="workItems")
    __properties = ["key", "size", "workItems"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WorkItemGroupModel:
        """Create an instance of WorkItemGroupModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in work_items (list)
        _items = []
        if self.work_items:
            for _item in self.work_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['workItems'] = _items
        # set to None if key (nullable) is None
        # and __fields_set__ contains the field
        if self.key is None and "key" in self.__fields_set__:
            _dict['key'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WorkItemGroupModel:
        """Create an instance of WorkItemGroupModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WorkItemGroupModel.parse_obj(obj)

        _obj = WorkItemGroupModel.parse_obj({
            "key": obj.get("key"),
            "size": obj.get("size"),
            "work_items": [WorkItemShortModel.from_dict(_item) for _item in obj.get("workItems")] if obj.get("workItems") is not None else None
        })
        return _obj


