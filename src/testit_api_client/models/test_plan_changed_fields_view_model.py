# coding: utf-8

"""
    API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from testit_api_client.models.boolean_changed_field_view_model import BooleanChangedFieldViewModel
from testit_api_client.models.boolean_nullable_changed_field_view_model import BooleanNullableChangedFieldViewModel
from testit_api_client.models.custom_attribute_change_model import CustomAttributeChangeModel
from testit_api_client.models.period_view_model_changed_field_view_model import PeriodViewModelChangedFieldViewModel
from testit_api_client.models.string_array_changed_field_view_model import StringArrayChangedFieldViewModel
from testit_api_client.models.string_changed_field_with_diffs_view_model import StringChangedFieldWithDiffsViewModel
from testit_api_client.models.test_point_change_view_model_changed_field_view_model import TestPointChangeViewModelChangedFieldViewModel
from testit_api_client.models.test_result_change_view_model_changed_field_view_model import TestResultChangeViewModelChangedFieldViewModel
from testit_api_client.models.test_suite_change_view_model_changed_field_view_model import TestSuiteChangeViewModelChangedFieldViewModel
from typing import Optional, Set
from typing_extensions import Self

class TestPlanChangedFieldsViewModel(BaseModel):
    """
    TestPlanChangedFieldsViewModel
    """ # noqa: E501
    name: Optional[StringChangedFieldWithDiffsViewModel] = None
    description: Optional[StringChangedFieldWithDiffsViewModel] = None
    product_name: Optional[StringChangedFieldWithDiffsViewModel] = Field(default=None, alias="productName")
    build: Optional[StringChangedFieldWithDiffsViewModel] = None
    period: Optional[PeriodViewModelChangedFieldViewModel] = None
    status: Optional[StringChangedFieldWithDiffsViewModel] = None
    tags: Optional[StringArrayChangedFieldViewModel] = None
    test_suite: Optional[TestSuiteChangeViewModelChangedFieldViewModel] = Field(default=None, alias="testSuite")
    test_points: Optional[TestPointChangeViewModelChangedFieldViewModel] = Field(default=None, alias="testPoints")
    test_results: Optional[TestResultChangeViewModelChangedFieldViewModel] = Field(default=None, alias="testResults")
    locking: Optional[BooleanChangedFieldViewModel] = None
    has_automatic_duration_timer: Optional[BooleanNullableChangedFieldViewModel] = Field(default=None, alias="hasAutomaticDurationTimer")
    attributes: Optional[Dict[str, CustomAttributeChangeModel]] = None
    __properties: ClassVar[List[str]] = ["name", "description", "productName", "build", "period", "status", "tags", "testSuite", "testPoints", "testResults", "locking", "hasAutomaticDurationTimer", "attributes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TestPlanChangedFieldsViewModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['name'] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict['description'] = self.description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of product_name
        if self.product_name:
            _dict['productName'] = self.product_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of build
        if self.build:
            _dict['build'] = self.build.to_dict()
        # override the default output from pydantic by calling `to_dict()` of period
        if self.period:
            _dict['period'] = self.period.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tags
        if self.tags:
            _dict['tags'] = self.tags.to_dict()
        # override the default output from pydantic by calling `to_dict()` of test_suite
        if self.test_suite:
            _dict['testSuite'] = self.test_suite.to_dict()
        # override the default output from pydantic by calling `to_dict()` of test_points
        if self.test_points:
            _dict['testPoints'] = self.test_points.to_dict()
        # override the default output from pydantic by calling `to_dict()` of test_results
        if self.test_results:
            _dict['testResults'] = self.test_results.to_dict()
        # override the default output from pydantic by calling `to_dict()` of locking
        if self.locking:
            _dict['locking'] = self.locking.to_dict()
        # override the default output from pydantic by calling `to_dict()` of has_automatic_duration_timer
        if self.has_automatic_duration_timer:
            _dict['hasAutomaticDurationTimer'] = self.has_automatic_duration_timer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in attributes (dict)
        _field_dict = {}
        if self.attributes:
            for _key_attributes in self.attributes:
                if self.attributes[_key_attributes]:
                    _field_dict[_key_attributes] = self.attributes[_key_attributes].to_dict()
            _dict['attributes'] = _field_dict
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if product_name (nullable) is None
        # and model_fields_set contains the field
        if self.product_name is None and "product_name" in self.model_fields_set:
            _dict['productName'] = None

        # set to None if build (nullable) is None
        # and model_fields_set contains the field
        if self.build is None and "build" in self.model_fields_set:
            _dict['build'] = None

        # set to None if period (nullable) is None
        # and model_fields_set contains the field
        if self.period is None and "period" in self.model_fields_set:
            _dict['period'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict['tags'] = None

        # set to None if test_suite (nullable) is None
        # and model_fields_set contains the field
        if self.test_suite is None and "test_suite" in self.model_fields_set:
            _dict['testSuite'] = None

        # set to None if test_points (nullable) is None
        # and model_fields_set contains the field
        if self.test_points is None and "test_points" in self.model_fields_set:
            _dict['testPoints'] = None

        # set to None if test_results (nullable) is None
        # and model_fields_set contains the field
        if self.test_results is None and "test_results" in self.model_fields_set:
            _dict['testResults'] = None

        # set to None if locking (nullable) is None
        # and model_fields_set contains the field
        if self.locking is None and "locking" in self.model_fields_set:
            _dict['locking'] = None

        # set to None if has_automatic_duration_timer (nullable) is None
        # and model_fields_set contains the field
        if self.has_automatic_duration_timer is None and "has_automatic_duration_timer" in self.model_fields_set:
            _dict['hasAutomaticDurationTimer'] = None

        # set to None if attributes (nullable) is None
        # and model_fields_set contains the field
        if self.attributes is None and "attributes" in self.model_fields_set:
            _dict['attributes'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TestPlanChangedFieldsViewModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": StringChangedFieldWithDiffsViewModel.from_dict(obj["name"]) if obj.get("name") is not None else None,
            "description": StringChangedFieldWithDiffsViewModel.from_dict(obj["description"]) if obj.get("description") is not None else None,
            "productName": StringChangedFieldWithDiffsViewModel.from_dict(obj["productName"]) if obj.get("productName") is not None else None,
            "build": StringChangedFieldWithDiffsViewModel.from_dict(obj["build"]) if obj.get("build") is not None else None,
            "period": PeriodViewModelChangedFieldViewModel.from_dict(obj["period"]) if obj.get("period") is not None else None,
            "status": StringChangedFieldWithDiffsViewModel.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "tags": StringArrayChangedFieldViewModel.from_dict(obj["tags"]) if obj.get("tags") is not None else None,
            "testSuite": TestSuiteChangeViewModelChangedFieldViewModel.from_dict(obj["testSuite"]) if obj.get("testSuite") is not None else None,
            "testPoints": TestPointChangeViewModelChangedFieldViewModel.from_dict(obj["testPoints"]) if obj.get("testPoints") is not None else None,
            "testResults": TestResultChangeViewModelChangedFieldViewModel.from_dict(obj["testResults"]) if obj.get("testResults") is not None else None,
            "locking": BooleanChangedFieldViewModel.from_dict(obj["locking"]) if obj.get("locking") is not None else None,
            "hasAutomaticDurationTimer": BooleanNullableChangedFieldViewModel.from_dict(obj["hasAutomaticDurationTimer"]) if obj.get("hasAutomaticDurationTimer") is not None else None,
            "attributes": dict(
                (_k, CustomAttributeChangeModel.from_dict(_v))
                for _k, _v in obj["attributes"].items()
            )
            if obj.get("attributes") is not None
            else None
        })
        return _obj


