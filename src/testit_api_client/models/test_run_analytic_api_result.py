# coding: utf-8

"""
    API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, conlist
from testit_api_client.models.test_run_group_by_failure_class_api_result import TestRunGroupByFailureClassApiResult
from testit_api_client.models.test_run_group_by_status_api_result import TestRunGroupByStatusApiResult
from testit_api_client.models.test_run_group_by_status_type_api_result import TestRunGroupByStatusTypeApiResult

class TestRunAnalyticApiResult(BaseModel):
    """
    TestRunAnalyticApiResult
    """
    count_group_by_status: conlist(TestRunGroupByStatusApiResult) = Field(default=..., alias="countGroupByStatus")
    count_group_by_status_type: conlist(TestRunGroupByStatusTypeApiResult) = Field(default=..., alias="countGroupByStatusType")
    count_group_by_failure_class: conlist(TestRunGroupByFailureClassApiResult) = Field(default=..., alias="countGroupByFailureClass")
    __properties = ["countGroupByStatus", "countGroupByStatusType", "countGroupByFailureClass"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TestRunAnalyticApiResult:
        """Create an instance of TestRunAnalyticApiResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in count_group_by_status (list)
        _items = []
        if self.count_group_by_status:
            for _item in self.count_group_by_status:
                if _item:
                    _items.append(_item.to_dict())
            _dict['countGroupByStatus'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in count_group_by_status_type (list)
        _items = []
        if self.count_group_by_status_type:
            for _item in self.count_group_by_status_type:
                if _item:
                    _items.append(_item.to_dict())
            _dict['countGroupByStatusType'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in count_group_by_failure_class (list)
        _items = []
        if self.count_group_by_failure_class:
            for _item in self.count_group_by_failure_class:
                if _item:
                    _items.append(_item.to_dict())
            _dict['countGroupByFailureClass'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TestRunAnalyticApiResult:
        """Create an instance of TestRunAnalyticApiResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TestRunAnalyticApiResult.parse_obj(obj)

        _obj = TestRunAnalyticApiResult.parse_obj({
            "count_group_by_status": [TestRunGroupByStatusApiResult.from_dict(_item) for _item in obj.get("countGroupByStatus")] if obj.get("countGroupByStatus") is not None else None,
            "count_group_by_status_type": [TestRunGroupByStatusTypeApiResult.from_dict(_item) for _item in obj.get("countGroupByStatusType")] if obj.get("countGroupByStatusType") is not None else None,
            "count_group_by_failure_class": [TestRunGroupByFailureClassApiResult.from_dict(_item) for _item in obj.get("countGroupByFailureClass")] if obj.get("countGroupByFailureClass") is not None else None
        })
        return _obj


