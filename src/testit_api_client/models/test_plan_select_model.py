# coding: utf-8

"""
    API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from testit_api_client.models.project_test_plans_filter_model import ProjectTestPlansFilterModel
from testit_api_client.models.test_plan_extraction_model import TestPlanExtractionModel

class TestPlanSelectModel(BaseModel):
    """
    TestPlanSelectModel
    """
    filter: ProjectTestPlansFilterModel = Field(...)
    extraction_model: Optional[TestPlanExtractionModel] = Field(default=None, alias="extractionModel")
    __properties = ["filter", "extractionModel"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TestPlanSelectModel:
        """Create an instance of TestPlanSelectModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of filter
        if self.filter:
            _dict['filter'] = self.filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of extraction_model
        if self.extraction_model:
            _dict['extractionModel'] = self.extraction_model.to_dict()
        # set to None if extraction_model (nullable) is None
        # and __fields_set__ contains the field
        if self.extraction_model is None and "extraction_model" in self.__fields_set__:
            _dict['extractionModel'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TestPlanSelectModel:
        """Create an instance of TestPlanSelectModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TestPlanSelectModel.parse_obj(obj)

        _obj = TestPlanSelectModel.parse_obj({
            "filter": ProjectTestPlansFilterModel.from_dict(obj.get("filter")) if obj.get("filter") is not None else None,
            "extraction_model": TestPlanExtractionModel.from_dict(obj.get("extractionModel")) if obj.get("extractionModel") is not None else None
        })
        return _obj


